//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Midway.ServiceClient.Model {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://synerdocs.ru", ConfigurationName="Model.IExchangeService")]
    public interface IExchangeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/Authenticate", ReplyAction="http://synerdocs.ru/IExchangeService/AuthenticateResponse")]
        string Authenticate(string login, string password, string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/Authenticate", ReplyAction="http://synerdocs.ru/IExchangeService/AuthenticateResponse")]
        System.IAsyncResult BeginAuthenticate(string login, string password, string applicationId, System.AsyncCallback callback, object asyncState);
        
        string EndAuthenticate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/AuthenticateWithCertificate", ReplyAction="http://synerdocs.ru/IExchangeService/AuthenticateWithCertificateResponse")]
        string AuthenticateWithCertificate(string certHash, string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/AuthenticateWithCertificate", ReplyAction="http://synerdocs.ru/IExchangeService/AuthenticateWithCertificateResponse")]
        System.IAsyncResult BeginAuthenticateWithCertificate(string certHash, string applicationId, System.AsyncCallback callback, object asyncState);
        
        string EndAuthenticateWithCertificate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/AuthenticateWithCertificate2", ReplyAction="http://synerdocs.ru/IExchangeService/AuthenticateWithCertificate2Response")]
        byte[] AuthenticateWithCertificate2(string certHash, string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/AuthenticateWithCertificate2", ReplyAction="http://synerdocs.ru/IExchangeService/AuthenticateWithCertificate2Response")]
        System.IAsyncResult BeginAuthenticateWithCertificate2(string certHash, string applicationId, System.AsyncCallback callback, object asyncState);
        
        byte[] EndAuthenticateWithCertificate2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetMessages", ReplyAction="http://synerdocs.ru/IExchangeService/GetMessagesResponse")]
        Midway.ObjectModel.MessageInfo[] GetMessages(string authToken, string afterMessageId, string fromBox, string toBox);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetMessages", ReplyAction="http://synerdocs.ru/IExchangeService/GetMessagesResponse")]
        System.IAsyncResult BeginGetMessages(string authToken, string afterMessageId, string fromBox, string toBox, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.MessageInfo[] EndGetMessages(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetMessage", ReplyAction="http://synerdocs.ru/IExchangeService/GetMessageResponse")]
        Midway.ObjectModel.Message GetMessage(string authToken, string boxId, string messageId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetMessage", ReplyAction="http://synerdocs.ru/IExchangeService/GetMessageResponse")]
        System.IAsyncResult BeginGetMessage(string authToken, string boxId, string messageId, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.Message EndGetMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/SendMessage", ReplyAction="http://synerdocs.ru/IExchangeService/SendMessageResponse")]
        Midway.ObjectModel.SentMessage SendMessage(string authToken, Midway.ObjectModel.Message message);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/SendMessage", ReplyAction="http://synerdocs.ru/IExchangeService/SendMessageResponse")]
        System.IAsyncResult BeginSendMessage(string authToken, Midway.ObjectModel.Message message, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.SentMessage EndSendMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/CreateDraftMessage", ReplyAction="http://synerdocs.ru/IExchangeService/CreateDraftMessageResponse")]
        string CreateDraftMessage(string authToken, Midway.ObjectModel.DraftMessage draftMessage);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/CreateDraftMessage", ReplyAction="http://synerdocs.ru/IExchangeService/CreateDraftMessageResponse")]
        System.IAsyncResult BeginCreateDraftMessage(string authToken, Midway.ObjectModel.DraftMessage draftMessage, System.AsyncCallback callback, object asyncState);
        
        string EndCreateDraftMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/UpdateDraftMessage", ReplyAction="http://synerdocs.ru/IExchangeService/UpdateDraftMessageResponse")]
        void UpdateDraftMessage(string authToken, Midway.ObjectModel.DraftMessage draftMessage);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/UpdateDraftMessage", ReplyAction="http://synerdocs.ru/IExchangeService/UpdateDraftMessageResponse")]
        System.IAsyncResult BeginUpdateDraftMessage(string authToken, Midway.ObjectModel.DraftMessage draftMessage, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateDraftMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/DeleteDraftMessage", ReplyAction="http://synerdocs.ru/IExchangeService/DeleteDraftMessageResponse")]
        void DeleteDraftMessage(string authToken, string messageId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/DeleteDraftMessage", ReplyAction="http://synerdocs.ru/IExchangeService/DeleteDraftMessageResponse")]
        System.IAsyncResult BeginDeleteDraftMessage(string authToken, string messageId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteDraftMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetDraftMessage", ReplyAction="http://synerdocs.ru/IExchangeService/GetDraftMessageResponse")]
        Midway.ObjectModel.DraftMessage GetDraftMessage(string authToken, string messageId, bool getContent, bool getCard);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetDraftMessage", ReplyAction="http://synerdocs.ru/IExchangeService/GetDraftMessageResponse")]
        System.IAsyncResult BeginGetDraftMessage(string authToken, string messageId, bool getContent, bool getCard, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.DraftMessage EndGetDraftMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetDraftMessageList", ReplyAction="http://synerdocs.ru/IExchangeService/GetDraftMessageListResponse")]
        Midway.ObjectModel.DraftMessageSearchResult GetDraftMessageList(string authToken, string boxId, Midway.ObjectModel.Common.FetchingSettings settings);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetDraftMessageList", ReplyAction="http://synerdocs.ru/IExchangeService/GetDraftMessageListResponse")]
        System.IAsyncResult BeginGetDraftMessageList(string authToken, string boxId, Midway.ObjectModel.Common.FetchingSettings settings, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.DraftMessageSearchResult EndGetDraftMessageList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetDraftMessageCount", ReplyAction="http://synerdocs.ru/IExchangeService/GetDraftMessageCountResponse")]
        int GetDraftMessageCount(string authToken, string boxId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetDraftMessageCount", ReplyAction="http://synerdocs.ru/IExchangeService/GetDraftMessageCountResponse")]
        System.IAsyncResult BeginGetDraftMessageCount(string authToken, string boxId, System.AsyncCallback callback, object asyncState);
        
        int EndGetDraftMessageCount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetDraftDocumentContent", ReplyAction="http://synerdocs.ru/IExchangeService/GetDraftDocumentContentResponse")]
        byte[] GetDraftDocumentContent(string authToken, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetDraftDocumentContent", ReplyAction="http://synerdocs.ru/IExchangeService/GetDraftDocumentContentResponse")]
        System.IAsyncResult BeginGetDraftDocumentContent(string authToken, string documentId, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetDraftDocumentContent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetDraftDocumentCard", ReplyAction="http://synerdocs.ru/IExchangeService/GetDraftDocumentCardResponse")]
        byte[] GetDraftDocumentCard(string authToken, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetDraftDocumentCard", ReplyAction="http://synerdocs.ru/IExchangeService/GetDraftDocumentCardResponse")]
        System.IAsyncResult BeginGetDraftDocumentCard(string authToken, string documentId, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetDraftDocumentCard(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GenerateInvoiceReceipt", ReplyAction="http://synerdocs.ru/IExchangeService/GenerateInvoiceReceiptResponse")]
        Midway.ObjectModel.NamedContent GenerateInvoiceReceipt(string authToken, string boxId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GenerateInvoiceReceipt", ReplyAction="http://synerdocs.ru/IExchangeService/GenerateInvoiceReceiptResponse")]
        System.IAsyncResult BeginGenerateInvoiceReceipt(string authToken, string boxId, string documentId, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.NamedContent EndGenerateInvoiceReceipt(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GenerateInvoiceReceiptV2", ReplyAction="http://synerdocs.ru/IExchangeService/GenerateInvoiceReceiptV2Response")]
        Midway.ObjectModel.NamedContent GenerateInvoiceReceiptV2(string authToken, string boxId, string documentId, string certThumbprint);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GenerateInvoiceReceiptV2", ReplyAction="http://synerdocs.ru/IExchangeService/GenerateInvoiceReceiptV2Response")]
        System.IAsyncResult BeginGenerateInvoiceReceiptV2(string authToken, string boxId, string documentId, string certThumbprint, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.NamedContent EndGenerateInvoiceReceiptV2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GenerateInvoiceAmendmentRequest", ReplyAction="http://synerdocs.ru/IExchangeService/GenerateInvoiceAmendmentRequestResponse")]
        Midway.ObjectModel.NamedContent GenerateInvoiceAmendmentRequest(string authToken, string boxId, string documentId, string text);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GenerateInvoiceAmendmentRequest", ReplyAction="http://synerdocs.ru/IExchangeService/GenerateInvoiceAmendmentRequestResponse")]
        System.IAsyncResult BeginGenerateInvoiceAmendmentRequest(string authToken, string boxId, string documentId, string text, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.NamedContent EndGenerateInvoiceAmendmentRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GenerateInvoiceAmendmentRequestV2", ReplyAction="http://synerdocs.ru/IExchangeService/GenerateInvoiceAmendmentRequestV2Response")]
        Midway.ObjectModel.NamedContent GenerateInvoiceAmendmentRequestV2(string authToken, string boxId, string documentId, string certThumbprint, string text);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GenerateInvoiceAmendmentRequestV2", ReplyAction="http://synerdocs.ru/IExchangeService/GenerateInvoiceAmendmentRequestV2Response")]
        System.IAsyncResult BeginGenerateInvoiceAmendmentRequestV2(string authToken, string boxId, string documentId, string certThumbprint, string text, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.NamedContent EndGenerateInvoiceAmendmentRequestV2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GenerateDeliveryConfirmation", ReplyAction="http://synerdocs.ru/IExchangeService/GenerateDeliveryConfirmationResponse")]
        Midway.ObjectModel.NamedContent GenerateDeliveryConfirmation(string authToken, string boxId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GenerateDeliveryConfirmation", ReplyAction="http://synerdocs.ru/IExchangeService/GenerateDeliveryConfirmationResponse")]
        System.IAsyncResult BeginGenerateDeliveryConfirmation(string authToken, string boxId, string documentId, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.NamedContent EndGenerateDeliveryConfirmation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GenerateDeliveryConfirmationV2", ReplyAction="http://synerdocs.ru/IExchangeService/GenerateDeliveryConfirmationV2Response")]
        Midway.ObjectModel.NamedContent GenerateDeliveryConfirmationV2(string authToken, string boxId, string documentId, string certThumbprint);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GenerateDeliveryConfirmationV2", ReplyAction="http://synerdocs.ru/IExchangeService/GenerateDeliveryConfirmationV2Response")]
        System.IAsyncResult BeginGenerateDeliveryConfirmationV2(string authToken, string boxId, string documentId, string certThumbprint, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.NamedContent EndGenerateDeliveryConfirmationV2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GenerateAmendmentRequest", ReplyAction="http://synerdocs.ru/IExchangeService/GenerateAmendmentRequestResponse")]
        Midway.ObjectModel.NamedContent GenerateAmendmentRequest(string authToken, string boxId, string documentId, string text);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GenerateAmendmentRequest", ReplyAction="http://synerdocs.ru/IExchangeService/GenerateAmendmentRequestResponse")]
        System.IAsyncResult BeginGenerateAmendmentRequest(string authToken, string boxId, string documentId, string text, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.NamedContent EndGenerateAmendmentRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GenerateAmendmentRequestV2", ReplyAction="http://synerdocs.ru/IExchangeService/GenerateAmendmentRequestV2Response")]
        Midway.ObjectModel.NamedContent GenerateAmendmentRequestV2(string authToken, string boxId, string documentId, string certThumbprint, string text);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GenerateAmendmentRequestV2", ReplyAction="http://synerdocs.ru/IExchangeService/GenerateAmendmentRequestV2Response")]
        System.IAsyncResult BeginGenerateAmendmentRequestV2(string authToken, string boxId, string documentId, string certThumbprint, string text, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.NamedContent EndGenerateAmendmentRequestV2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GenerateTitleBuyer", ReplyAction="http://synerdocs.ru/IExchangeService/GenerateTitleBuyerResponse")]
        Midway.ObjectModel.NamedContent GenerateTitleBuyer(string authToken, string boxId, string documentId, Midway.ObjectModel.TitleBuyer text, Midway.ObjectModel.SignerInfo signerInfo);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GenerateTitleBuyer", ReplyAction="http://synerdocs.ru/IExchangeService/GenerateTitleBuyerResponse")]
        System.IAsyncResult BeginGenerateTitleBuyer(string authToken, string boxId, string documentId, Midway.ObjectModel.TitleBuyer text, Midway.ObjectModel.SignerInfo signerInfo, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.NamedContent EndGenerateTitleBuyer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetDocumentContent", ReplyAction="http://synerdocs.ru/IExchangeService/GetDocumentContentResponse")]
        byte[] GetDocumentContent(string authToken, string boxId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetDocumentContent", ReplyAction="http://synerdocs.ru/IExchangeService/GetDocumentContentResponse")]
        System.IAsyncResult BeginGetDocumentContent(string authToken, string boxId, string documentId, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetDocumentContent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetFullDocumentInfo", ReplyAction="http://synerdocs.ru/IExchangeService/GetFullDocumentInfoResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Midway.ObjectModel.FlowDocumentInfoRequestParams))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Midway.ObjectModel.FlowDocumentInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Midway.ObjectModel.ServiceDocument))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Midway.ObjectModel.InvoiceDocumentFlowStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Midway.ObjectModel.UntypedDocumentFlowStatus))]
        Midway.ObjectModel.FullDocumentInfo GetFullDocumentInfo(string authToken, string boxId, string documentId, Midway.ObjectModel.FullDocumentInfoRequestParams requestParams);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetFullDocumentInfo", ReplyAction="http://synerdocs.ru/IExchangeService/GetFullDocumentInfoResponse")]
        System.IAsyncResult BeginGetFullDocumentInfo(string authToken, string boxId, string documentId, Midway.ObjectModel.FullDocumentInfoRequestParams requestParams, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.FullDocumentInfo EndGetFullDocumentInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetDocumentList", ReplyAction="http://synerdocs.ru/IExchangeService/GetDocumentListResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Midway.ObjectModel.DocumentEntryOptions))]
        Midway.ObjectModel.DocumentList GetDocumentList(string authToken, Midway.ObjectModel.DocumentListOptions options);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetDocumentList", ReplyAction="http://synerdocs.ru/IExchangeService/GetDocumentListResponse")]
        System.IAsyncResult BeginGetDocumentList(string authToken, Midway.ObjectModel.DocumentListOptions options, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.DocumentList EndGetDocumentList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetInnKppNameByBoxId", ReplyAction="http://synerdocs.ru/IExchangeService/GetInnKppNameByBoxIdResponse")]
        Midway.ObjectModel.InnKppName GetInnKppNameByBoxId(string token, string boxId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetInnKppNameByBoxId", ReplyAction="http://synerdocs.ru/IExchangeService/GetInnKppNameByBoxIdResponse")]
        System.IAsyncResult BeginGetInnKppNameByBoxId(string token, string boxId, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.InnKppName EndGetInnKppNameByBoxId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/SearchContacts", ReplyAction="http://synerdocs.ru/IExchangeService/SearchContactsResponse")]
        Midway.ObjectModel.ContactSearchResult SearchContacts(string authToken, Midway.ObjectModel.ContactSearchOptions contactSearchOptions);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/SearchContacts", ReplyAction="http://synerdocs.ru/IExchangeService/SearchContactsResponse")]
        System.IAsyncResult BeginSearchContacts(string authToken, Midway.ObjectModel.ContactSearchOptions contactSearchOptions, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.ContactSearchResult EndSearchContacts(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetContact", ReplyAction="http://synerdocs.ru/IExchangeService/GetContactResponse")]
        Midway.ObjectModel.Contact GetContact(string authToken, int organizationId, int contragentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetContact", ReplyAction="http://synerdocs.ru/IExchangeService/GetContactResponse")]
        System.IAsyncResult BeginGetContact(string authToken, int organizationId, int contragentId, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.Contact EndGetContact(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/AcceptAuthorization", ReplyAction="http://synerdocs.ru/IExchangeService/AcceptAuthorizationResponse")]
        Midway.ObjectModel.ContactStatus AcceptAuthorization(string authToken, int organizationId, int contragentId, string comment);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/AcceptAuthorization", ReplyAction="http://synerdocs.ru/IExchangeService/AcceptAuthorizationResponse")]
        System.IAsyncResult BeginAcceptAuthorization(string authToken, int organizationId, int contragentId, string comment, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.ContactStatus EndAcceptAuthorization(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/RejectAuthorization", ReplyAction="http://synerdocs.ru/IExchangeService/RejectAuthorizationResponse")]
        Midway.ObjectModel.ContactStatus RejectAuthorization(string authToken, int organizationId, int contragentId, string comment);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/RejectAuthorization", ReplyAction="http://synerdocs.ru/IExchangeService/RejectAuthorizationResponse")]
        System.IAsyncResult BeginRejectAuthorization(string authToken, int organizationId, int contragentId, string comment, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.ContactStatus EndRejectAuthorization(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/SendAuthRequest", ReplyAction="http://synerdocs.ru/IExchangeService/SendAuthRequestResponse")]
        void SendAuthRequest(string authToken, int organizationId, int contragentId, string comment);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/SendAuthRequest", ReplyAction="http://synerdocs.ru/IExchangeService/SendAuthRequestResponse")]
        System.IAsyncResult BeginSendAuthRequest(string authToken, int organizationId, int contragentId, string comment, System.AsyncCallback callback, object asyncState);
        
        void EndSendAuthRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/CancelAuthRequest", ReplyAction="http://synerdocs.ru/IExchangeService/CancelAuthRequestResponse")]
        void CancelAuthRequest(string authToken, int organizationId, int contragentId, string comment);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/CancelAuthRequest", ReplyAction="http://synerdocs.ru/IExchangeService/CancelAuthRequestResponse")]
        System.IAsyncResult BeginCancelAuthRequest(string authToken, int organizationId, int contragentId, string comment, System.AsyncCallback callback, object asyncState);
        
        void EndCancelAuthRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/AcceptAuthRequest", ReplyAction="http://synerdocs.ru/IExchangeService/AcceptAuthRequestResponse")]
        void AcceptAuthRequest(string authToken, int organizationId, int contragentId, string comment);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/AcceptAuthRequest", ReplyAction="http://synerdocs.ru/IExchangeService/AcceptAuthRequestResponse")]
        System.IAsyncResult BeginAcceptAuthRequest(string authToken, int organizationId, int contragentId, string comment, System.AsyncCallback callback, object asyncState);
        
        void EndAcceptAuthRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/RejectAuthRequest", ReplyAction="http://synerdocs.ru/IExchangeService/RejectAuthRequestResponse")]
        void RejectAuthRequest(string authToken, int organizationId, int contragentId, string comment);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/RejectAuthRequest", ReplyAction="http://synerdocs.ru/IExchangeService/RejectAuthRequestResponse")]
        System.IAsyncResult BeginRejectAuthRequest(string authToken, int organizationId, int contragentId, string comment, System.AsyncCallback callback, object asyncState);
        
        void EndRejectAuthRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/DeleteContact", ReplyAction="http://synerdocs.ru/IExchangeService/DeleteContactResponse")]
        void DeleteContact(string authToken, int organizationId, int contragentId, string comment);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/DeleteContact", ReplyAction="http://synerdocs.ru/IExchangeService/DeleteContactResponse")]
        System.IAsyncResult BeginDeleteContact(string authToken, int organizationId, int contragentId, string comment, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteContact(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetOrganizationByInnKpp", ReplyAction="http://synerdocs.ru/IExchangeService/GetOrganizationByInnKppResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Midway.ObjectModel.OrganizationAddress))]
        Midway.ObjectModel.Organization GetOrganizationByInnKpp(string authToken, string inn, string kpp);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetOrganizationByInnKpp", ReplyAction="http://synerdocs.ru/IExchangeService/GetOrganizationByInnKppResponse")]
        System.IAsyncResult BeginGetOrganizationByInnKpp(string authToken, string inn, string kpp, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.Organization EndGetOrganizationByInnKpp(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetOrganizationBy", ReplyAction="http://synerdocs.ru/IExchangeService/GetOrganizationByResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Midway.ObjectModel.OrganizationAddress))]
        Midway.ObjectModel.Organization GetOrganizationBy(string authToken, string boxId, Midway.ObjectModel.OrganizationByCriteria criteria, Midway.ObjectModel.OrganizationByCriteriaValues values);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetOrganizationBy", ReplyAction="http://synerdocs.ru/IExchangeService/GetOrganizationByResponse")]
        System.IAsyncResult BeginGetOrganizationBy(string authToken, string boxId, Midway.ObjectModel.OrganizationByCriteria criteria, Midway.ObjectModel.OrganizationByCriteriaValues values, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.Organization EndGetOrganizationBy(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetErrorText", ReplyAction="http://synerdocs.ru/IExchangeService/GetErrorTextResponse")]
        string GetErrorText(Midway.ObjectModel.Exceptions.ServiceErrorCode code);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetErrorText", ReplyAction="http://synerdocs.ru/IExchangeService/GetErrorTextResponse")]
        System.IAsyncResult BeginGetErrorText(Midway.ObjectModel.Exceptions.ServiceErrorCode code, System.AsyncCallback callback, object asyncState);
        
        string EndGetErrorText(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetBoxes", ReplyAction="http://synerdocs.ru/IExchangeService/GetBoxesResponse")]
        Midway.ObjectModel.BoxInfo[] GetBoxes(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetBoxes", ReplyAction="http://synerdocs.ru/IExchangeService/GetBoxesResponse")]
        System.IAsyncResult BeginGetBoxes(string authToken, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.BoxInfo[] EndGetBoxes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetSubjectInfo", ReplyAction="http://synerdocs.ru/IExchangeService/GetSubjectInfoResponse")]
        Midway.ObjectModel.SubjectInfo GetSubjectInfo(string authToken, string subjectBoxId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetSubjectInfo", ReplyAction="http://synerdocs.ru/IExchangeService/GetSubjectInfoResponse")]
        System.IAsyncResult BeginGetSubjectInfo(string authToken, string subjectBoxId, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.SubjectInfo EndGetSubjectInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetSpecialOperatorInfo", ReplyAction="http://synerdocs.ru/IExchangeService/GetSpecialOperatorInfoResponse")]
        Midway.ObjectModel.SubjectInfo GetSpecialOperatorInfo(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetSpecialOperatorInfo", ReplyAction="http://synerdocs.ru/IExchangeService/GetSpecialOperatorInfoResponse")]
        System.IAsyncResult BeginGetSpecialOperatorInfo(string authToken, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.SubjectInfo EndGetSpecialOperatorInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/AddOrganizationStructureElement", ReplyAction="http://synerdocs.ru/IExchangeService/AddOrganizationStructureElementResponse")]
        string AddOrganizationStructureElement(string authToken, Midway.ObjectModel.OrganizationStructureElement element);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/AddOrganizationStructureElement", ReplyAction="http://synerdocs.ru/IExchangeService/AddOrganizationStructureElementResponse")]
        System.IAsyncResult BeginAddOrganizationStructureElement(string authToken, Midway.ObjectModel.OrganizationStructureElement element, System.AsyncCallback callback, object asyncState);
        
        string EndAddOrganizationStructureElement(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/DeleteOrganizationStructureElement", ReplyAction="http://synerdocs.ru/IExchangeService/DeleteOrganizationStructureElementResponse")]
        void DeleteOrganizationStructureElement(string authToken, string organizationId, string elementId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/DeleteOrganizationStructureElement", ReplyAction="http://synerdocs.ru/IExchangeService/DeleteOrganizationStructureElementResponse")]
        System.IAsyncResult BeginDeleteOrganizationStructureElement(string authToken, string organizationId, string elementId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteOrganizationStructureElement(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/ModifyOrganizationStructureElement", ReplyAction="http://synerdocs.ru/IExchangeService/ModifyOrganizationStructureElementResponse")]
        void ModifyOrganizationStructureElement(string authToken, Midway.ObjectModel.OrganizationStructureElement element);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/ModifyOrganizationStructureElement", ReplyAction="http://synerdocs.ru/IExchangeService/ModifyOrganizationStructureElementResponse")]
        System.IAsyncResult BeginModifyOrganizationStructureElement(string authToken, Midway.ObjectModel.OrganizationStructureElement element, System.AsyncCallback callback, object asyncState);
        
        void EndModifyOrganizationStructureElement(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetOrganizationStructure", ReplyAction="http://synerdocs.ru/IExchangeService/GetOrganizationStructureResponse")]
        Midway.ObjectModel.OrganizationStructureElement[] GetOrganizationStructure(string authToken, string boxId, string organizationId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetOrganizationStructure", ReplyAction="http://synerdocs.ru/IExchangeService/GetOrganizationStructureResponse")]
        System.IAsyncResult BeginGetOrganizationStructure(string authToken, string boxId, string organizationId, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.OrganizationStructureElement[] EndGetOrganizationStructure(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/OrganizationStructureHasSingleElement", ReplyAction="http://synerdocs.ru/IExchangeService/OrganizationStructureHasSingleElementRespons" +
            "e")]
        bool OrganizationStructureHasSingleElement(string authToken, string organizationId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/OrganizationStructureHasSingleElement", ReplyAction="http://synerdocs.ru/IExchangeService/OrganizationStructureHasSingleElementRespons" +
            "e")]
        System.IAsyncResult BeginOrganizationStructureHasSingleElement(string authToken, string organizationId, System.AsyncCallback callback, object asyncState);
        
        bool EndOrganizationStructureHasSingleElement(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetOrganizationStructureElementChildren", ReplyAction="http://synerdocs.ru/IExchangeService/GetOrganizationStructureElementChildrenRespo" +
            "nse")]
        Midway.ObjectModel.OrganizationStructureElement[] GetOrganizationStructureElementChildren(string authToken, string organizationId, string orgStructureElementId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetOrganizationStructureElementChildren", ReplyAction="http://synerdocs.ru/IExchangeService/GetOrganizationStructureElementChildrenRespo" +
            "nse")]
        System.IAsyncResult BeginGetOrganizationStructureElementChildren(string authToken, string organizationId, string orgStructureElementId, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.OrganizationStructureElement[] EndGetOrganizationStructureElementChildren(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetVersion", ReplyAction="http://synerdocs.ru/IExchangeService/GetVersionResponse")]
        string GetVersion();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetVersion", ReplyAction="http://synerdocs.ru/IExchangeService/GetVersionResponse")]
        System.IAsyncResult BeginGetVersion(System.AsyncCallback callback, object asyncState);
        
        string EndGetVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/CanSendInvoice", ReplyAction="http://synerdocs.ru/IExchangeService/CanSendInvoiceResponse")]
        bool CanSendInvoice(string authToken, string certHash);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/CanSendInvoice", ReplyAction="http://synerdocs.ru/IExchangeService/CanSendInvoiceResponse")]
        System.IAsyncResult BeginCanSendInvoice(string authToken, string certHash, System.AsyncCallback callback, object asyncState);
        
        bool EndCanSendInvoice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/CheckQualifiedCertificate", ReplyAction="http://synerdocs.ru/IExchangeService/CheckQualifiedCertificateResponse")]
        Midway.ObjectModel.CertificateValidationResult CheckQualifiedCertificate(byte[] certificate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/CheckQualifiedCertificate", ReplyAction="http://synerdocs.ru/IExchangeService/CheckQualifiedCertificateResponse")]
        System.IAsyncResult BeginCheckQualifiedCertificate(byte[] certificate, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.CertificateValidationResult EndCheckQualifiedCertificate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetBoxCertificates", ReplyAction="http://synerdocs.ru/IExchangeService/GetBoxCertificatesResponse")]
        Midway.ObjectModel.BoxCertificate[] GetBoxCertificates(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetBoxCertificates", ReplyAction="http://synerdocs.ru/IExchangeService/GetBoxCertificatesResponse")]
        System.IAsyncResult BeginGetBoxCertificates(string authToken, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.BoxCertificate[] EndGetBoxCertificates(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetRequiredNotices", ReplyAction="http://synerdocs.ru/IExchangeService/GetRequiredNoticesResponse")]
        Midway.ObjectModel.ServiceNotice[] GetRequiredNotices(string authToken, string boxId, string certThumbprint);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetRequiredNotices", ReplyAction="http://synerdocs.ru/IExchangeService/GetRequiredNoticesResponse")]
        System.IAsyncResult BeginGetRequiredNotices(string authToken, string boxId, string certThumbprint, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.ServiceNotice[] EndGetRequiredNotices(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetEnhancedSign", ReplyAction="http://synerdocs.ru/IExchangeService/GetEnhancedSignResponse")]
        Midway.ObjectModel.EnhancedSign GetEnhancedSign(string authToken, string boxId, byte[] sign);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetEnhancedSign", ReplyAction="http://synerdocs.ru/IExchangeService/GetEnhancedSignResponse")]
        System.IAsyncResult BeginGetEnhancedSign(string authToken, string boxId, byte[] sign, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.EnhancedSign EndGetEnhancedSign(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetEnhancedSignById", ReplyAction="http://synerdocs.ru/IExchangeService/GetEnhancedSignByIdResponse")]
        Midway.ObjectModel.EnhancedSign GetEnhancedSignById(string authToken, string boxId, string signId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetEnhancedSignById", ReplyAction="http://synerdocs.ru/IExchangeService/GetEnhancedSignByIdResponse")]
        System.IAsyncResult BeginGetEnhancedSignById(string authToken, string boxId, string signId, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.EnhancedSign EndGetEnhancedSignById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/DownloadDocumentFlowArchive", ReplyAction="http://synerdocs.ru/IExchangeService/DownloadDocumentFlowArchiveResponse")]
        Midway.ObjectModel.NamedContent DownloadDocumentFlowArchive(string authToken, string boxId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/DownloadDocumentFlowArchive", ReplyAction="http://synerdocs.ru/IExchangeService/DownloadDocumentFlowArchiveResponse")]
        System.IAsyncResult BeginDownloadDocumentFlowArchive(string authToken, string boxId, string documentId, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.NamedContent EndDownloadDocumentFlowArchive(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetOrganizationListByInnKpp", ReplyAction="http://synerdocs.ru/IExchangeService/GetOrganizationListByInnKppResponse")]
        Midway.ObjectModel.Organization[] GetOrganizationListByInnKpp(string authToken, string inn, string kpp);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetOrganizationListByInnKpp", ReplyAction="http://synerdocs.ru/IExchangeService/GetOrganizationListByInnKppResponse")]
        System.IAsyncResult BeginGetOrganizationListByInnKpp(string authToken, string inn, string kpp, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.Organization[] EndGetOrganizationListByInnKpp(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/CheckCertificates", ReplyAction="http://synerdocs.ru/IExchangeService/CheckCertificatesResponse")]
        string[] CheckCertificates(string[] thumbprints);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/CheckCertificates", ReplyAction="http://synerdocs.ru/IExchangeService/CheckCertificatesResponse")]
        System.IAsyncResult BeginCheckCertificates(string[] thumbprints, System.AsyncCallback callback, object asyncState);
        
        string[] EndCheckCertificates(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetUserInfo", ReplyAction="http://synerdocs.ru/IExchangeService/GetUserInfoResponse")]
        Midway.ObjectModel.User GetUserInfo(string authToken, string boxId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetUserInfo", ReplyAction="http://synerdocs.ru/IExchangeService/GetUserInfoResponse")]
        System.IAsyncResult BeginGetUserInfo(string authToken, string boxId, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.User EndGetUserInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/Register", ReplyAction="http://synerdocs.ru/IExchangeService/RegisterResponse")]
        Midway.ObjectModel.RegisterResult Register(Midway.ObjectModel.RegisterModel registerModel, byte[] certificate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/Register", ReplyAction="http://synerdocs.ru/IExchangeService/RegisterResponse")]
        System.IAsyncResult BeginRegister(Midway.ObjectModel.RegisterModel registerModel, byte[] certificate, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.RegisterResult EndRegister(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/AcceptRegulation", ReplyAction="http://synerdocs.ru/IExchangeService/AcceptRegulationResponse")]
        bool AcceptRegulation(string authToken, string boxId, [System.ServiceModel.MessageParameterAttribute(Name="acceptRegulation")] bool acceptRegulation1);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/AcceptRegulation", ReplyAction="http://synerdocs.ru/IExchangeService/AcceptRegulationResponse")]
        System.IAsyncResult BeginAcceptRegulation(string authToken, string boxId, bool acceptRegulation, System.AsyncCallback callback, object asyncState);
        
        bool EndAcceptRegulation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/HasQualifiedCertificate", ReplyAction="http://synerdocs.ru/IExchangeService/HasQualifiedCertificateResponse")]
        bool HasQualifiedCertificate(string authToken, string contragentBoxId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/HasQualifiedCertificate", ReplyAction="http://synerdocs.ru/IExchangeService/HasQualifiedCertificateResponse")]
        System.IAsyncResult BeginHasQualifiedCertificate(string authToken, string contragentBoxId, System.AsyncCallback callback, object asyncState);
        
        bool EndHasQualifiedCertificate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/SendUnsignedMessage", ReplyAction="http://synerdocs.ru/IExchangeService/SendUnsignedMessageResponse")]
        Midway.ObjectModel.SentMessage SendUnsignedMessage(string authToken, Midway.ObjectModel.UnsignedMessage message);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/SendUnsignedMessage", ReplyAction="http://synerdocs.ru/IExchangeService/SendUnsignedMessageResponse")]
        System.IAsyncResult BeginSendUnsignedMessage(string authToken, Midway.ObjectModel.UnsignedMessage message, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.SentMessage EndSendUnsignedMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/SendForwardMessage", ReplyAction="http://synerdocs.ru/IExchangeService/SendForwardMessageResponse")]
        Midway.ObjectModel.SentMessage SendForwardMessage(string authToken, Midway.ObjectModel.ForwardMessage message);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/SendForwardMessage", ReplyAction="http://synerdocs.ru/IExchangeService/SendForwardMessageResponse")]
        System.IAsyncResult BeginSendForwardMessage(string authToken, Midway.ObjectModel.ForwardMessage message, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.SentMessage EndSendForwardMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/SignDocument", ReplyAction="http://synerdocs.ru/IExchangeService/SignDocumentResponse")]
        void SignDocument(string authToken, Midway.ObjectModel.FlowType flowType, Midway.ObjectModel.Sign sign);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/SignDocument", ReplyAction="http://synerdocs.ru/IExchangeService/SignDocumentResponse")]
        System.IAsyncResult BeginSignDocument(string authToken, Midway.ObjectModel.FlowType flowType, Midway.ObjectModel.Sign sign, System.AsyncCallback callback, object asyncState);
        
        void EndSignDocument(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/RejectSign", ReplyAction="http://synerdocs.ru/IExchangeService/RejectSignResponse")]
        void RejectSign(string authToken, Midway.ObjectModel.FlowType flowType, [System.ServiceModel.MessageParameterAttribute(Name="rejectSign")] Midway.ObjectModel.RejectSign rejectSign1);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/RejectSign", ReplyAction="http://synerdocs.ru/IExchangeService/RejectSignResponse")]
        System.IAsyncResult BeginRejectSign(string authToken, Midway.ObjectModel.FlowType flowType, Midway.ObjectModel.RejectSign rejectSign, System.AsyncCallback callback, object asyncState);
        
        void EndRejectSign(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetDocumentEntries", ReplyAction="http://synerdocs.ru/IExchangeService/GetDocumentEntriesResponse")]
        Midway.ObjectModel.DocumentEntryList GetDocumentEntries(string authToken, Midway.ObjectModel.DocumentEntryOptions options);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetDocumentEntries", ReplyAction="http://synerdocs.ru/IExchangeService/GetDocumentEntriesResponse")]
        System.IAsyncResult BeginGetDocumentEntries(string authToken, Midway.ObjectModel.DocumentEntryOptions options, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.DocumentEntryList EndGetDocumentEntries(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetFlowDocumentInfo", ReplyAction="http://synerdocs.ru/IExchangeService/GetFlowDocumentInfoResponse")]
        Midway.ObjectModel.FlowDocumentInfo GetFlowDocumentInfo(string authToken, string boxId, string documentId, Midway.ObjectModel.FlowDocumentInfoRequestParams requestParams);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetFlowDocumentInfo", ReplyAction="http://synerdocs.ru/IExchangeService/GetFlowDocumentInfoResponse")]
        System.IAsyncResult BeginGetFlowDocumentInfo(string authToken, string boxId, string documentId, Midway.ObjectModel.FlowDocumentInfoRequestParams requestParams, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.FlowDocumentInfo EndGetFlowDocumentInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/SendInternalMessage", ReplyAction="http://synerdocs.ru/IExchangeService/SendInternalMessageResponse")]
        Midway.ObjectModel.SentMessage SendInternalMessage(string authToken, Midway.ObjectModel.InternalMessage message);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/SendInternalMessage", ReplyAction="http://synerdocs.ru/IExchangeService/SendInternalMessageResponse")]
        System.IAsyncResult BeginSendInternalMessage(string authToken, Midway.ObjectModel.InternalMessage message, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.SentMessage EndSendInternalMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetInternalDocuments", ReplyAction="http://synerdocs.ru/IExchangeService/GetInternalDocumentsResponse")]
        Midway.ObjectModel.DocumentEntryList GetInternalDocuments(string authToken, Midway.ObjectModel.InternalListOptions options);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetInternalDocuments", ReplyAction="http://synerdocs.ru/IExchangeService/GetInternalDocumentsResponse")]
        System.IAsyncResult BeginGetInternalDocuments(string authToken, Midway.ObjectModel.InternalListOptions options, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.DocumentEntryList EndGetInternalDocuments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/MoveDocumentToDepartment", ReplyAction="http://synerdocs.ru/IExchangeService/MoveDocumentToDepartmentResponse")]
        bool MoveDocumentToDepartment(string authToken, string boxId, string documentId, string departmentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/MoveDocumentToDepartment", ReplyAction="http://synerdocs.ru/IExchangeService/MoveDocumentToDepartmentResponse")]
        System.IAsyncResult BeginMoveDocumentToDepartment(string authToken, string boxId, string documentId, string departmentId, System.AsyncCallback callback, object asyncState);
        
        bool EndMoveDocumentToDepartment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/MoveDocumentsToDepartment", ReplyAction="http://synerdocs.ru/IExchangeService/MoveDocumentsToDepartmentResponse")]
        string[] MoveDocumentsToDepartment(string authToken, string boxId, string[] documentIds, string departmentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/MoveDocumentsToDepartment", ReplyAction="http://synerdocs.ru/IExchangeService/MoveDocumentsToDepartmentResponse")]
        System.IAsyncResult BeginMoveDocumentsToDepartment(string authToken, string boxId, string[] documentIds, string departmentId, System.AsyncCallback callback, object asyncState);
        
        string[] EndMoveDocumentsToDepartment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://synerdocs.ru/IExchangeService/GetDepartmentEmployees", ReplyAction="http://synerdocs.ru/IExchangeService/GetDepartmentEmployeesResponse")]
        Midway.ObjectModel.User[] GetDepartmentEmployees(string authToken, string boxId, string departmentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://synerdocs.ru/IExchangeService/GetDepartmentEmployees", ReplyAction="http://synerdocs.ru/IExchangeService/GetDepartmentEmployeesResponse")]
        System.IAsyncResult BeginGetDepartmentEmployees(string authToken, string boxId, string departmentId, System.AsyncCallback callback, object asyncState);
        
        Midway.ObjectModel.User[] EndGetDepartmentEmployees(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IExchangeServiceChannel : Midway.ServiceClient.Model.IExchangeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthenticateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AuthenticateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthenticateWithCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AuthenticateWithCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthenticateWithCertificate2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AuthenticateWithCertificate2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.MessageInfo[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.MessageInfo[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.Message Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.Message)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.SentMessage Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.SentMessage)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateDraftMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateDraftMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDraftMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDraftMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.DraftMessage Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.DraftMessage)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDraftMessageListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDraftMessageListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.DraftMessageSearchResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.DraftMessageSearchResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDraftMessageCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDraftMessageCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDraftDocumentContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDraftDocumentContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDraftDocumentCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDraftDocumentCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GenerateInvoiceReceiptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GenerateInvoiceReceiptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.NamedContent Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.NamedContent)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GenerateInvoiceReceiptV2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GenerateInvoiceReceiptV2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.NamedContent Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.NamedContent)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GenerateInvoiceAmendmentRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GenerateInvoiceAmendmentRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.NamedContent Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.NamedContent)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GenerateInvoiceAmendmentRequestV2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GenerateInvoiceAmendmentRequestV2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.NamedContent Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.NamedContent)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GenerateDeliveryConfirmationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GenerateDeliveryConfirmationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.NamedContent Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.NamedContent)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GenerateDeliveryConfirmationV2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GenerateDeliveryConfirmationV2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.NamedContent Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.NamedContent)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GenerateAmendmentRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GenerateAmendmentRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.NamedContent Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.NamedContent)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GenerateAmendmentRequestV2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GenerateAmendmentRequestV2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.NamedContent Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.NamedContent)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GenerateTitleBuyerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GenerateTitleBuyerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.NamedContent Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.NamedContent)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDocumentContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDocumentContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFullDocumentInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFullDocumentInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.FullDocumentInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.FullDocumentInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDocumentListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDocumentListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.DocumentList Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.DocumentList)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetInnKppNameByBoxIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInnKppNameByBoxIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.InnKppName Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.InnKppName)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SearchContactsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SearchContactsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.ContactSearchResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.ContactSearchResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.Contact Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.Contact)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AcceptAuthorizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AcceptAuthorizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.ContactStatus Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.ContactStatus)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RejectAuthorizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RejectAuthorizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.ContactStatus Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.ContactStatus)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOrganizationByInnKppCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOrganizationByInnKppCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.Organization Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.Organization)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOrganizationByCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOrganizationByCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.Organization Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.Organization)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetErrorTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetErrorTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBoxesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBoxesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.BoxInfo[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.BoxInfo[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSubjectInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSubjectInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.SubjectInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.SubjectInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSpecialOperatorInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSpecialOperatorInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.SubjectInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.SubjectInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddOrganizationStructureElementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddOrganizationStructureElementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOrganizationStructureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOrganizationStructureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.OrganizationStructureElement[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.OrganizationStructureElement[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrganizationStructureHasSingleElementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OrganizationStructureHasSingleElementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOrganizationStructureElementChildrenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOrganizationStructureElementChildrenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.OrganizationStructureElement[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.OrganizationStructureElement[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CanSendInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CanSendInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckQualifiedCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckQualifiedCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.CertificateValidationResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.CertificateValidationResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBoxCertificatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBoxCertificatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.BoxCertificate[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.BoxCertificate[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRequiredNoticesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRequiredNoticesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.ServiceNotice[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.ServiceNotice[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEnhancedSignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEnhancedSignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.EnhancedSign Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.EnhancedSign)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEnhancedSignByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEnhancedSignByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.EnhancedSign Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.EnhancedSign)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DownloadDocumentFlowArchiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DownloadDocumentFlowArchiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.NamedContent Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.NamedContent)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOrganizationListByInnKppCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOrganizationListByInnKppCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.Organization[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.Organization[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckCertificatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckCertificatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.User Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.User)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegisterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.RegisterResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.RegisterResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AcceptRegulationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AcceptRegulationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HasQualifiedCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public HasQualifiedCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendUnsignedMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendUnsignedMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.SentMessage Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.SentMessage)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendForwardMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendForwardMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.SentMessage Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.SentMessage)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDocumentEntriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDocumentEntriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.DocumentEntryList Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.DocumentEntryList)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFlowDocumentInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFlowDocumentInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.FlowDocumentInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.FlowDocumentInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendInternalMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendInternalMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.SentMessage Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.SentMessage)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetInternalDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInternalDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.DocumentEntryList Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.DocumentEntryList)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MoveDocumentToDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MoveDocumentToDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MoveDocumentsToDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MoveDocumentsToDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDepartmentEmployeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDepartmentEmployeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Midway.ObjectModel.User[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Midway.ObjectModel.User[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExchangeServiceClient : System.ServiceModel.ClientBase<Midway.ServiceClient.Model.IExchangeService>, Midway.ServiceClient.Model.IExchangeService {
        
        private BeginOperationDelegate onBeginAuthenticateDelegate;
        
        private EndOperationDelegate onEndAuthenticateDelegate;
        
        private System.Threading.SendOrPostCallback onAuthenticateCompletedDelegate;
        
        private BeginOperationDelegate onBeginAuthenticateWithCertificateDelegate;
        
        private EndOperationDelegate onEndAuthenticateWithCertificateDelegate;
        
        private System.Threading.SendOrPostCallback onAuthenticateWithCertificateCompletedDelegate;
        
        private BeginOperationDelegate onBeginAuthenticateWithCertificate2Delegate;
        
        private EndOperationDelegate onEndAuthenticateWithCertificate2Delegate;
        
        private System.Threading.SendOrPostCallback onAuthenticateWithCertificate2CompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMessagesDelegate;
        
        private EndOperationDelegate onEndGetMessagesDelegate;
        
        private System.Threading.SendOrPostCallback onGetMessagesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMessageDelegate;
        
        private EndOperationDelegate onEndGetMessageDelegate;
        
        private System.Threading.SendOrPostCallback onGetMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendMessageDelegate;
        
        private EndOperationDelegate onEndSendMessageDelegate;
        
        private System.Threading.SendOrPostCallback onSendMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateDraftMessageDelegate;
        
        private EndOperationDelegate onEndCreateDraftMessageDelegate;
        
        private System.Threading.SendOrPostCallback onCreateDraftMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateDraftMessageDelegate;
        
        private EndOperationDelegate onEndUpdateDraftMessageDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateDraftMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteDraftMessageDelegate;
        
        private EndOperationDelegate onEndDeleteDraftMessageDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteDraftMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDraftMessageDelegate;
        
        private EndOperationDelegate onEndGetDraftMessageDelegate;
        
        private System.Threading.SendOrPostCallback onGetDraftMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDraftMessageListDelegate;
        
        private EndOperationDelegate onEndGetDraftMessageListDelegate;
        
        private System.Threading.SendOrPostCallback onGetDraftMessageListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDraftMessageCountDelegate;
        
        private EndOperationDelegate onEndGetDraftMessageCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetDraftMessageCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDraftDocumentContentDelegate;
        
        private EndOperationDelegate onEndGetDraftDocumentContentDelegate;
        
        private System.Threading.SendOrPostCallback onGetDraftDocumentContentCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDraftDocumentCardDelegate;
        
        private EndOperationDelegate onEndGetDraftDocumentCardDelegate;
        
        private System.Threading.SendOrPostCallback onGetDraftDocumentCardCompletedDelegate;
        
        private BeginOperationDelegate onBeginGenerateInvoiceReceiptDelegate;
        
        private EndOperationDelegate onEndGenerateInvoiceReceiptDelegate;
        
        private System.Threading.SendOrPostCallback onGenerateInvoiceReceiptCompletedDelegate;
        
        private BeginOperationDelegate onBeginGenerateInvoiceReceiptV2Delegate;
        
        private EndOperationDelegate onEndGenerateInvoiceReceiptV2Delegate;
        
        private System.Threading.SendOrPostCallback onGenerateInvoiceReceiptV2CompletedDelegate;
        
        private BeginOperationDelegate onBeginGenerateInvoiceAmendmentRequestDelegate;
        
        private EndOperationDelegate onEndGenerateInvoiceAmendmentRequestDelegate;
        
        private System.Threading.SendOrPostCallback onGenerateInvoiceAmendmentRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginGenerateInvoiceAmendmentRequestV2Delegate;
        
        private EndOperationDelegate onEndGenerateInvoiceAmendmentRequestV2Delegate;
        
        private System.Threading.SendOrPostCallback onGenerateInvoiceAmendmentRequestV2CompletedDelegate;
        
        private BeginOperationDelegate onBeginGenerateDeliveryConfirmationDelegate;
        
        private EndOperationDelegate onEndGenerateDeliveryConfirmationDelegate;
        
        private System.Threading.SendOrPostCallback onGenerateDeliveryConfirmationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGenerateDeliveryConfirmationV2Delegate;
        
        private EndOperationDelegate onEndGenerateDeliveryConfirmationV2Delegate;
        
        private System.Threading.SendOrPostCallback onGenerateDeliveryConfirmationV2CompletedDelegate;
        
        private BeginOperationDelegate onBeginGenerateAmendmentRequestDelegate;
        
        private EndOperationDelegate onEndGenerateAmendmentRequestDelegate;
        
        private System.Threading.SendOrPostCallback onGenerateAmendmentRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginGenerateAmendmentRequestV2Delegate;
        
        private EndOperationDelegate onEndGenerateAmendmentRequestV2Delegate;
        
        private System.Threading.SendOrPostCallback onGenerateAmendmentRequestV2CompletedDelegate;
        
        private BeginOperationDelegate onBeginGenerateTitleBuyerDelegate;
        
        private EndOperationDelegate onEndGenerateTitleBuyerDelegate;
        
        private System.Threading.SendOrPostCallback onGenerateTitleBuyerCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDocumentContentDelegate;
        
        private EndOperationDelegate onEndGetDocumentContentDelegate;
        
        private System.Threading.SendOrPostCallback onGetDocumentContentCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFullDocumentInfoDelegate;
        
        private EndOperationDelegate onEndGetFullDocumentInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetFullDocumentInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDocumentListDelegate;
        
        private EndOperationDelegate onEndGetDocumentListDelegate;
        
        private System.Threading.SendOrPostCallback onGetDocumentListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetInnKppNameByBoxIdDelegate;
        
        private EndOperationDelegate onEndGetInnKppNameByBoxIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetInnKppNameByBoxIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginSearchContactsDelegate;
        
        private EndOperationDelegate onEndSearchContactsDelegate;
        
        private System.Threading.SendOrPostCallback onSearchContactsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetContactDelegate;
        
        private EndOperationDelegate onEndGetContactDelegate;
        
        private System.Threading.SendOrPostCallback onGetContactCompletedDelegate;
        
        private BeginOperationDelegate onBeginAcceptAuthorizationDelegate;
        
        private EndOperationDelegate onEndAcceptAuthorizationDelegate;
        
        private System.Threading.SendOrPostCallback onAcceptAuthorizationCompletedDelegate;
        
        private BeginOperationDelegate onBeginRejectAuthorizationDelegate;
        
        private EndOperationDelegate onEndRejectAuthorizationDelegate;
        
        private System.Threading.SendOrPostCallback onRejectAuthorizationCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendAuthRequestDelegate;
        
        private EndOperationDelegate onEndSendAuthRequestDelegate;
        
        private System.Threading.SendOrPostCallback onSendAuthRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginCancelAuthRequestDelegate;
        
        private EndOperationDelegate onEndCancelAuthRequestDelegate;
        
        private System.Threading.SendOrPostCallback onCancelAuthRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginAcceptAuthRequestDelegate;
        
        private EndOperationDelegate onEndAcceptAuthRequestDelegate;
        
        private System.Threading.SendOrPostCallback onAcceptAuthRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginRejectAuthRequestDelegate;
        
        private EndOperationDelegate onEndRejectAuthRequestDelegate;
        
        private System.Threading.SendOrPostCallback onRejectAuthRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteContactDelegate;
        
        private EndOperationDelegate onEndDeleteContactDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteContactCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOrganizationByInnKppDelegate;
        
        private EndOperationDelegate onEndGetOrganizationByInnKppDelegate;
        
        private System.Threading.SendOrPostCallback onGetOrganizationByInnKppCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOrganizationByDelegate;
        
        private EndOperationDelegate onEndGetOrganizationByDelegate;
        
        private System.Threading.SendOrPostCallback onGetOrganizationByCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetErrorTextDelegate;
        
        private EndOperationDelegate onEndGetErrorTextDelegate;
        
        private System.Threading.SendOrPostCallback onGetErrorTextCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBoxesDelegate;
        
        private EndOperationDelegate onEndGetBoxesDelegate;
        
        private System.Threading.SendOrPostCallback onGetBoxesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSubjectInfoDelegate;
        
        private EndOperationDelegate onEndGetSubjectInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetSubjectInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSpecialOperatorInfoDelegate;
        
        private EndOperationDelegate onEndGetSpecialOperatorInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetSpecialOperatorInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddOrganizationStructureElementDelegate;
        
        private EndOperationDelegate onEndAddOrganizationStructureElementDelegate;
        
        private System.Threading.SendOrPostCallback onAddOrganizationStructureElementCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteOrganizationStructureElementDelegate;
        
        private EndOperationDelegate onEndDeleteOrganizationStructureElementDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteOrganizationStructureElementCompletedDelegate;
        
        private BeginOperationDelegate onBeginModifyOrganizationStructureElementDelegate;
        
        private EndOperationDelegate onEndModifyOrganizationStructureElementDelegate;
        
        private System.Threading.SendOrPostCallback onModifyOrganizationStructureElementCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOrganizationStructureDelegate;
        
        private EndOperationDelegate onEndGetOrganizationStructureDelegate;
        
        private System.Threading.SendOrPostCallback onGetOrganizationStructureCompletedDelegate;
        
        private BeginOperationDelegate onBeginOrganizationStructureHasSingleElementDelegate;
        
        private EndOperationDelegate onEndOrganizationStructureHasSingleElementDelegate;
        
        private System.Threading.SendOrPostCallback onOrganizationStructureHasSingleElementCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOrganizationStructureElementChildrenDelegate;
        
        private EndOperationDelegate onEndGetOrganizationStructureElementChildrenDelegate;
        
        private System.Threading.SendOrPostCallback onGetOrganizationStructureElementChildrenCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVersionDelegate;
        
        private EndOperationDelegate onEndGetVersionDelegate;
        
        private System.Threading.SendOrPostCallback onGetVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginCanSendInvoiceDelegate;
        
        private EndOperationDelegate onEndCanSendInvoiceDelegate;
        
        private System.Threading.SendOrPostCallback onCanSendInvoiceCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckQualifiedCertificateDelegate;
        
        private EndOperationDelegate onEndCheckQualifiedCertificateDelegate;
        
        private System.Threading.SendOrPostCallback onCheckQualifiedCertificateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBoxCertificatesDelegate;
        
        private EndOperationDelegate onEndGetBoxCertificatesDelegate;
        
        private System.Threading.SendOrPostCallback onGetBoxCertificatesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRequiredNoticesDelegate;
        
        private EndOperationDelegate onEndGetRequiredNoticesDelegate;
        
        private System.Threading.SendOrPostCallback onGetRequiredNoticesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetEnhancedSignDelegate;
        
        private EndOperationDelegate onEndGetEnhancedSignDelegate;
        
        private System.Threading.SendOrPostCallback onGetEnhancedSignCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetEnhancedSignByIdDelegate;
        
        private EndOperationDelegate onEndGetEnhancedSignByIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetEnhancedSignByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginDownloadDocumentFlowArchiveDelegate;
        
        private EndOperationDelegate onEndDownloadDocumentFlowArchiveDelegate;
        
        private System.Threading.SendOrPostCallback onDownloadDocumentFlowArchiveCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOrganizationListByInnKppDelegate;
        
        private EndOperationDelegate onEndGetOrganizationListByInnKppDelegate;
        
        private System.Threading.SendOrPostCallback onGetOrganizationListByInnKppCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckCertificatesDelegate;
        
        private EndOperationDelegate onEndCheckCertificatesDelegate;
        
        private System.Threading.SendOrPostCallback onCheckCertificatesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserInfoDelegate;
        
        private EndOperationDelegate onEndGetUserInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegisterDelegate;
        
        private EndOperationDelegate onEndRegisterDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterCompletedDelegate;
        
        private BeginOperationDelegate onBeginAcceptRegulationDelegate;
        
        private EndOperationDelegate onEndAcceptRegulationDelegate;
        
        private System.Threading.SendOrPostCallback onAcceptRegulationCompletedDelegate;
        
        private BeginOperationDelegate onBeginHasQualifiedCertificateDelegate;
        
        private EndOperationDelegate onEndHasQualifiedCertificateDelegate;
        
        private System.Threading.SendOrPostCallback onHasQualifiedCertificateCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendUnsignedMessageDelegate;
        
        private EndOperationDelegate onEndSendUnsignedMessageDelegate;
        
        private System.Threading.SendOrPostCallback onSendUnsignedMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendForwardMessageDelegate;
        
        private EndOperationDelegate onEndSendForwardMessageDelegate;
        
        private System.Threading.SendOrPostCallback onSendForwardMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginSignDocumentDelegate;
        
        private EndOperationDelegate onEndSignDocumentDelegate;
        
        private System.Threading.SendOrPostCallback onSignDocumentCompletedDelegate;
        
        private BeginOperationDelegate onBeginRejectSignDelegate;
        
        private EndOperationDelegate onEndRejectSignDelegate;
        
        private System.Threading.SendOrPostCallback onRejectSignCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDocumentEntriesDelegate;
        
        private EndOperationDelegate onEndGetDocumentEntriesDelegate;
        
        private System.Threading.SendOrPostCallback onGetDocumentEntriesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFlowDocumentInfoDelegate;
        
        private EndOperationDelegate onEndGetFlowDocumentInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetFlowDocumentInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendInternalMessageDelegate;
        
        private EndOperationDelegate onEndSendInternalMessageDelegate;
        
        private System.Threading.SendOrPostCallback onSendInternalMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetInternalDocumentsDelegate;
        
        private EndOperationDelegate onEndGetInternalDocumentsDelegate;
        
        private System.Threading.SendOrPostCallback onGetInternalDocumentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginMoveDocumentToDepartmentDelegate;
        
        private EndOperationDelegate onEndMoveDocumentToDepartmentDelegate;
        
        private System.Threading.SendOrPostCallback onMoveDocumentToDepartmentCompletedDelegate;
        
        private BeginOperationDelegate onBeginMoveDocumentsToDepartmentDelegate;
        
        private EndOperationDelegate onEndMoveDocumentsToDepartmentDelegate;
        
        private System.Threading.SendOrPostCallback onMoveDocumentsToDepartmentCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDepartmentEmployeesDelegate;
        
        private EndOperationDelegate onEndGetDepartmentEmployeesDelegate;
        
        private System.Threading.SendOrPostCallback onGetDepartmentEmployeesCompletedDelegate;
        
        public ExchangeServiceClient() {
        }
        
        public ExchangeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ExchangeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExchangeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExchangeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<AuthenticateCompletedEventArgs> AuthenticateCompleted;
        
        public event System.EventHandler<AuthenticateWithCertificateCompletedEventArgs> AuthenticateWithCertificateCompleted;
        
        public event System.EventHandler<AuthenticateWithCertificate2CompletedEventArgs> AuthenticateWithCertificate2Completed;
        
        public event System.EventHandler<GetMessagesCompletedEventArgs> GetMessagesCompleted;
        
        public event System.EventHandler<GetMessageCompletedEventArgs> GetMessageCompleted;
        
        public event System.EventHandler<SendMessageCompletedEventArgs> SendMessageCompleted;
        
        public event System.EventHandler<CreateDraftMessageCompletedEventArgs> CreateDraftMessageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateDraftMessageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteDraftMessageCompleted;
        
        public event System.EventHandler<GetDraftMessageCompletedEventArgs> GetDraftMessageCompleted;
        
        public event System.EventHandler<GetDraftMessageListCompletedEventArgs> GetDraftMessageListCompleted;
        
        public event System.EventHandler<GetDraftMessageCountCompletedEventArgs> GetDraftMessageCountCompleted;
        
        public event System.EventHandler<GetDraftDocumentContentCompletedEventArgs> GetDraftDocumentContentCompleted;
        
        public event System.EventHandler<GetDraftDocumentCardCompletedEventArgs> GetDraftDocumentCardCompleted;
        
        public event System.EventHandler<GenerateInvoiceReceiptCompletedEventArgs> GenerateInvoiceReceiptCompleted;
        
        public event System.EventHandler<GenerateInvoiceReceiptV2CompletedEventArgs> GenerateInvoiceReceiptV2Completed;
        
        public event System.EventHandler<GenerateInvoiceAmendmentRequestCompletedEventArgs> GenerateInvoiceAmendmentRequestCompleted;
        
        public event System.EventHandler<GenerateInvoiceAmendmentRequestV2CompletedEventArgs> GenerateInvoiceAmendmentRequestV2Completed;
        
        public event System.EventHandler<GenerateDeliveryConfirmationCompletedEventArgs> GenerateDeliveryConfirmationCompleted;
        
        public event System.EventHandler<GenerateDeliveryConfirmationV2CompletedEventArgs> GenerateDeliveryConfirmationV2Completed;
        
        public event System.EventHandler<GenerateAmendmentRequestCompletedEventArgs> GenerateAmendmentRequestCompleted;
        
        public event System.EventHandler<GenerateAmendmentRequestV2CompletedEventArgs> GenerateAmendmentRequestV2Completed;
        
        public event System.EventHandler<GenerateTitleBuyerCompletedEventArgs> GenerateTitleBuyerCompleted;
        
        public event System.EventHandler<GetDocumentContentCompletedEventArgs> GetDocumentContentCompleted;
        
        public event System.EventHandler<GetFullDocumentInfoCompletedEventArgs> GetFullDocumentInfoCompleted;
        
        public event System.EventHandler<GetDocumentListCompletedEventArgs> GetDocumentListCompleted;
        
        public event System.EventHandler<GetInnKppNameByBoxIdCompletedEventArgs> GetInnKppNameByBoxIdCompleted;
        
        public event System.EventHandler<SearchContactsCompletedEventArgs> SearchContactsCompleted;
        
        public event System.EventHandler<GetContactCompletedEventArgs> GetContactCompleted;
        
        public event System.EventHandler<AcceptAuthorizationCompletedEventArgs> AcceptAuthorizationCompleted;
        
        public event System.EventHandler<RejectAuthorizationCompletedEventArgs> RejectAuthorizationCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendAuthRequestCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CancelAuthRequestCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AcceptAuthRequestCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RejectAuthRequestCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteContactCompleted;
        
        public event System.EventHandler<GetOrganizationByInnKppCompletedEventArgs> GetOrganizationByInnKppCompleted;
        
        public event System.EventHandler<GetOrganizationByCompletedEventArgs> GetOrganizationByCompleted;
        
        public event System.EventHandler<GetErrorTextCompletedEventArgs> GetErrorTextCompleted;
        
        public event System.EventHandler<GetBoxesCompletedEventArgs> GetBoxesCompleted;
        
        public event System.EventHandler<GetSubjectInfoCompletedEventArgs> GetSubjectInfoCompleted;
        
        public event System.EventHandler<GetSpecialOperatorInfoCompletedEventArgs> GetSpecialOperatorInfoCompleted;
        
        public event System.EventHandler<AddOrganizationStructureElementCompletedEventArgs> AddOrganizationStructureElementCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteOrganizationStructureElementCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ModifyOrganizationStructureElementCompleted;
        
        public event System.EventHandler<GetOrganizationStructureCompletedEventArgs> GetOrganizationStructureCompleted;
        
        public event System.EventHandler<OrganizationStructureHasSingleElementCompletedEventArgs> OrganizationStructureHasSingleElementCompleted;
        
        public event System.EventHandler<GetOrganizationStructureElementChildrenCompletedEventArgs> GetOrganizationStructureElementChildrenCompleted;
        
        public event System.EventHandler<GetVersionCompletedEventArgs> GetVersionCompleted;
        
        public event System.EventHandler<CanSendInvoiceCompletedEventArgs> CanSendInvoiceCompleted;
        
        public event System.EventHandler<CheckQualifiedCertificateCompletedEventArgs> CheckQualifiedCertificateCompleted;
        
        public event System.EventHandler<GetBoxCertificatesCompletedEventArgs> GetBoxCertificatesCompleted;
        
        public event System.EventHandler<GetRequiredNoticesCompletedEventArgs> GetRequiredNoticesCompleted;
        
        public event System.EventHandler<GetEnhancedSignCompletedEventArgs> GetEnhancedSignCompleted;
        
        public event System.EventHandler<GetEnhancedSignByIdCompletedEventArgs> GetEnhancedSignByIdCompleted;
        
        public event System.EventHandler<DownloadDocumentFlowArchiveCompletedEventArgs> DownloadDocumentFlowArchiveCompleted;
        
        public event System.EventHandler<GetOrganizationListByInnKppCompletedEventArgs> GetOrganizationListByInnKppCompleted;
        
        public event System.EventHandler<CheckCertificatesCompletedEventArgs> CheckCertificatesCompleted;
        
        public event System.EventHandler<GetUserInfoCompletedEventArgs> GetUserInfoCompleted;
        
        public event System.EventHandler<RegisterCompletedEventArgs> RegisterCompleted;
        
        public event System.EventHandler<AcceptRegulationCompletedEventArgs> AcceptRegulationCompleted;
        
        public event System.EventHandler<HasQualifiedCertificateCompletedEventArgs> HasQualifiedCertificateCompleted;
        
        public event System.EventHandler<SendUnsignedMessageCompletedEventArgs> SendUnsignedMessageCompleted;
        
        public event System.EventHandler<SendForwardMessageCompletedEventArgs> SendForwardMessageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SignDocumentCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RejectSignCompleted;
        
        public event System.EventHandler<GetDocumentEntriesCompletedEventArgs> GetDocumentEntriesCompleted;
        
        public event System.EventHandler<GetFlowDocumentInfoCompletedEventArgs> GetFlowDocumentInfoCompleted;
        
        public event System.EventHandler<SendInternalMessageCompletedEventArgs> SendInternalMessageCompleted;
        
        public event System.EventHandler<GetInternalDocumentsCompletedEventArgs> GetInternalDocumentsCompleted;
        
        public event System.EventHandler<MoveDocumentToDepartmentCompletedEventArgs> MoveDocumentToDepartmentCompleted;
        
        public event System.EventHandler<MoveDocumentsToDepartmentCompletedEventArgs> MoveDocumentsToDepartmentCompleted;
        
        public event System.EventHandler<GetDepartmentEmployeesCompletedEventArgs> GetDepartmentEmployeesCompleted;
        
        public string Authenticate(string login, string password, string applicationId) {
            return base.Channel.Authenticate(login, password, applicationId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAuthenticate(string login, string password, string applicationId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAuthenticate(login, password, applicationId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndAuthenticate(System.IAsyncResult result) {
            return base.Channel.EndAuthenticate(result);
        }
        
        private System.IAsyncResult OnBeginAuthenticate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string login = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            string applicationId = ((string)(inValues[2]));
            return this.BeginAuthenticate(login, password, applicationId, callback, asyncState);
        }
        
        private object[] OnEndAuthenticate(System.IAsyncResult result) {
            string retVal = this.EndAuthenticate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAuthenticateCompleted(object state) {
            if ((this.AuthenticateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AuthenticateCompleted(this, new AuthenticateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AuthenticateAsync(string login, string password, string applicationId) {
            this.AuthenticateAsync(login, password, applicationId, null);
        }
        
        public void AuthenticateAsync(string login, string password, string applicationId, object userState) {
            if ((this.onBeginAuthenticateDelegate == null)) {
                this.onBeginAuthenticateDelegate = new BeginOperationDelegate(this.OnBeginAuthenticate);
            }
            if ((this.onEndAuthenticateDelegate == null)) {
                this.onEndAuthenticateDelegate = new EndOperationDelegate(this.OnEndAuthenticate);
            }
            if ((this.onAuthenticateCompletedDelegate == null)) {
                this.onAuthenticateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAuthenticateCompleted);
            }
            base.InvokeAsync(this.onBeginAuthenticateDelegate, new object[] {
                        login,
                        password,
                        applicationId}, this.onEndAuthenticateDelegate, this.onAuthenticateCompletedDelegate, userState);
        }
        
        public string AuthenticateWithCertificate(string certHash, string applicationId) {
            return base.Channel.AuthenticateWithCertificate(certHash, applicationId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAuthenticateWithCertificate(string certHash, string applicationId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAuthenticateWithCertificate(certHash, applicationId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndAuthenticateWithCertificate(System.IAsyncResult result) {
            return base.Channel.EndAuthenticateWithCertificate(result);
        }
        
        private System.IAsyncResult OnBeginAuthenticateWithCertificate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string certHash = ((string)(inValues[0]));
            string applicationId = ((string)(inValues[1]));
            return this.BeginAuthenticateWithCertificate(certHash, applicationId, callback, asyncState);
        }
        
        private object[] OnEndAuthenticateWithCertificate(System.IAsyncResult result) {
            string retVal = this.EndAuthenticateWithCertificate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAuthenticateWithCertificateCompleted(object state) {
            if ((this.AuthenticateWithCertificateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AuthenticateWithCertificateCompleted(this, new AuthenticateWithCertificateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AuthenticateWithCertificateAsync(string certHash, string applicationId) {
            this.AuthenticateWithCertificateAsync(certHash, applicationId, null);
        }
        
        public void AuthenticateWithCertificateAsync(string certHash, string applicationId, object userState) {
            if ((this.onBeginAuthenticateWithCertificateDelegate == null)) {
                this.onBeginAuthenticateWithCertificateDelegate = new BeginOperationDelegate(this.OnBeginAuthenticateWithCertificate);
            }
            if ((this.onEndAuthenticateWithCertificateDelegate == null)) {
                this.onEndAuthenticateWithCertificateDelegate = new EndOperationDelegate(this.OnEndAuthenticateWithCertificate);
            }
            if ((this.onAuthenticateWithCertificateCompletedDelegate == null)) {
                this.onAuthenticateWithCertificateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAuthenticateWithCertificateCompleted);
            }
            base.InvokeAsync(this.onBeginAuthenticateWithCertificateDelegate, new object[] {
                        certHash,
                        applicationId}, this.onEndAuthenticateWithCertificateDelegate, this.onAuthenticateWithCertificateCompletedDelegate, userState);
        }
        
        public byte[] AuthenticateWithCertificate2(string certHash, string applicationId) {
            return base.Channel.AuthenticateWithCertificate2(certHash, applicationId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAuthenticateWithCertificate2(string certHash, string applicationId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAuthenticateWithCertificate2(certHash, applicationId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public byte[] EndAuthenticateWithCertificate2(System.IAsyncResult result) {
            return base.Channel.EndAuthenticateWithCertificate2(result);
        }
        
        private System.IAsyncResult OnBeginAuthenticateWithCertificate2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string certHash = ((string)(inValues[0]));
            string applicationId = ((string)(inValues[1]));
            return this.BeginAuthenticateWithCertificate2(certHash, applicationId, callback, asyncState);
        }
        
        private object[] OnEndAuthenticateWithCertificate2(System.IAsyncResult result) {
            byte[] retVal = this.EndAuthenticateWithCertificate2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAuthenticateWithCertificate2Completed(object state) {
            if ((this.AuthenticateWithCertificate2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AuthenticateWithCertificate2Completed(this, new AuthenticateWithCertificate2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AuthenticateWithCertificate2Async(string certHash, string applicationId) {
            this.AuthenticateWithCertificate2Async(certHash, applicationId, null);
        }
        
        public void AuthenticateWithCertificate2Async(string certHash, string applicationId, object userState) {
            if ((this.onBeginAuthenticateWithCertificate2Delegate == null)) {
                this.onBeginAuthenticateWithCertificate2Delegate = new BeginOperationDelegate(this.OnBeginAuthenticateWithCertificate2);
            }
            if ((this.onEndAuthenticateWithCertificate2Delegate == null)) {
                this.onEndAuthenticateWithCertificate2Delegate = new EndOperationDelegate(this.OnEndAuthenticateWithCertificate2);
            }
            if ((this.onAuthenticateWithCertificate2CompletedDelegate == null)) {
                this.onAuthenticateWithCertificate2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAuthenticateWithCertificate2Completed);
            }
            base.InvokeAsync(this.onBeginAuthenticateWithCertificate2Delegate, new object[] {
                        certHash,
                        applicationId}, this.onEndAuthenticateWithCertificate2Delegate, this.onAuthenticateWithCertificate2CompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.MessageInfo[] GetMessages(string authToken, string afterMessageId, string fromBox, string toBox) {
            return base.Channel.GetMessages(authToken, afterMessageId, fromBox, toBox);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMessages(string authToken, string afterMessageId, string fromBox, string toBox, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMessages(authToken, afterMessageId, fromBox, toBox, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.MessageInfo[] EndGetMessages(System.IAsyncResult result) {
            return base.Channel.EndGetMessages(result);
        }
        
        private System.IAsyncResult OnBeginGetMessages(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string afterMessageId = ((string)(inValues[1]));
            string fromBox = ((string)(inValues[2]));
            string toBox = ((string)(inValues[3]));
            return this.BeginGetMessages(authToken, afterMessageId, fromBox, toBox, callback, asyncState);
        }
        
        private object[] OnEndGetMessages(System.IAsyncResult result) {
            Midway.ObjectModel.MessageInfo[] retVal = this.EndGetMessages(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMessagesCompleted(object state) {
            if ((this.GetMessagesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMessagesCompleted(this, new GetMessagesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMessagesAsync(string authToken, string afterMessageId, string fromBox, string toBox) {
            this.GetMessagesAsync(authToken, afterMessageId, fromBox, toBox, null);
        }
        
        public void GetMessagesAsync(string authToken, string afterMessageId, string fromBox, string toBox, object userState) {
            if ((this.onBeginGetMessagesDelegate == null)) {
                this.onBeginGetMessagesDelegate = new BeginOperationDelegate(this.OnBeginGetMessages);
            }
            if ((this.onEndGetMessagesDelegate == null)) {
                this.onEndGetMessagesDelegate = new EndOperationDelegate(this.OnEndGetMessages);
            }
            if ((this.onGetMessagesCompletedDelegate == null)) {
                this.onGetMessagesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMessagesCompleted);
            }
            base.InvokeAsync(this.onBeginGetMessagesDelegate, new object[] {
                        authToken,
                        afterMessageId,
                        fromBox,
                        toBox}, this.onEndGetMessagesDelegate, this.onGetMessagesCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.Message GetMessage(string authToken, string boxId, string messageId) {
            return base.Channel.GetMessage(authToken, boxId, messageId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMessage(string authToken, string boxId, string messageId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMessage(authToken, boxId, messageId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.Message EndGetMessage(System.IAsyncResult result) {
            return base.Channel.EndGetMessage(result);
        }
        
        private System.IAsyncResult OnBeginGetMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            string messageId = ((string)(inValues[2]));
            return this.BeginGetMessage(authToken, boxId, messageId, callback, asyncState);
        }
        
        private object[] OnEndGetMessage(System.IAsyncResult result) {
            Midway.ObjectModel.Message retVal = this.EndGetMessage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMessageCompleted(object state) {
            if ((this.GetMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMessageCompleted(this, new GetMessageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMessageAsync(string authToken, string boxId, string messageId) {
            this.GetMessageAsync(authToken, boxId, messageId, null);
        }
        
        public void GetMessageAsync(string authToken, string boxId, string messageId, object userState) {
            if ((this.onBeginGetMessageDelegate == null)) {
                this.onBeginGetMessageDelegate = new BeginOperationDelegate(this.OnBeginGetMessage);
            }
            if ((this.onEndGetMessageDelegate == null)) {
                this.onEndGetMessageDelegate = new EndOperationDelegate(this.OnEndGetMessage);
            }
            if ((this.onGetMessageCompletedDelegate == null)) {
                this.onGetMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMessageCompleted);
            }
            base.InvokeAsync(this.onBeginGetMessageDelegate, new object[] {
                        authToken,
                        boxId,
                        messageId}, this.onEndGetMessageDelegate, this.onGetMessageCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.SentMessage SendMessage(string authToken, Midway.ObjectModel.Message message) {
            return base.Channel.SendMessage(authToken, message);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendMessage(string authToken, Midway.ObjectModel.Message message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendMessage(authToken, message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.SentMessage EndSendMessage(System.IAsyncResult result) {
            return base.Channel.EndSendMessage(result);
        }
        
        private System.IAsyncResult OnBeginSendMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            Midway.ObjectModel.Message message = ((Midway.ObjectModel.Message)(inValues[1]));
            return this.BeginSendMessage(authToken, message, callback, asyncState);
        }
        
        private object[] OnEndSendMessage(System.IAsyncResult result) {
            Midway.ObjectModel.SentMessage retVal = this.EndSendMessage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendMessageCompleted(object state) {
            if ((this.SendMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendMessageCompleted(this, new SendMessageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendMessageAsync(string authToken, Midway.ObjectModel.Message message) {
            this.SendMessageAsync(authToken, message, null);
        }
        
        public void SendMessageAsync(string authToken, Midway.ObjectModel.Message message, object userState) {
            if ((this.onBeginSendMessageDelegate == null)) {
                this.onBeginSendMessageDelegate = new BeginOperationDelegate(this.OnBeginSendMessage);
            }
            if ((this.onEndSendMessageDelegate == null)) {
                this.onEndSendMessageDelegate = new EndOperationDelegate(this.OnEndSendMessage);
            }
            if ((this.onSendMessageCompletedDelegate == null)) {
                this.onSendMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendMessageCompleted);
            }
            base.InvokeAsync(this.onBeginSendMessageDelegate, new object[] {
                        authToken,
                        message}, this.onEndSendMessageDelegate, this.onSendMessageCompletedDelegate, userState);
        }
        
        public string CreateDraftMessage(string authToken, Midway.ObjectModel.DraftMessage draftMessage) {
            return base.Channel.CreateDraftMessage(authToken, draftMessage);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreateDraftMessage(string authToken, Midway.ObjectModel.DraftMessage draftMessage, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateDraftMessage(authToken, draftMessage, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndCreateDraftMessage(System.IAsyncResult result) {
            return base.Channel.EndCreateDraftMessage(result);
        }
        
        private System.IAsyncResult OnBeginCreateDraftMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            Midway.ObjectModel.DraftMessage draftMessage = ((Midway.ObjectModel.DraftMessage)(inValues[1]));
            return this.BeginCreateDraftMessage(authToken, draftMessage, callback, asyncState);
        }
        
        private object[] OnEndCreateDraftMessage(System.IAsyncResult result) {
            string retVal = this.EndCreateDraftMessage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateDraftMessageCompleted(object state) {
            if ((this.CreateDraftMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateDraftMessageCompleted(this, new CreateDraftMessageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateDraftMessageAsync(string authToken, Midway.ObjectModel.DraftMessage draftMessage) {
            this.CreateDraftMessageAsync(authToken, draftMessage, null);
        }
        
        public void CreateDraftMessageAsync(string authToken, Midway.ObjectModel.DraftMessage draftMessage, object userState) {
            if ((this.onBeginCreateDraftMessageDelegate == null)) {
                this.onBeginCreateDraftMessageDelegate = new BeginOperationDelegate(this.OnBeginCreateDraftMessage);
            }
            if ((this.onEndCreateDraftMessageDelegate == null)) {
                this.onEndCreateDraftMessageDelegate = new EndOperationDelegate(this.OnEndCreateDraftMessage);
            }
            if ((this.onCreateDraftMessageCompletedDelegate == null)) {
                this.onCreateDraftMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateDraftMessageCompleted);
            }
            base.InvokeAsync(this.onBeginCreateDraftMessageDelegate, new object[] {
                        authToken,
                        draftMessage}, this.onEndCreateDraftMessageDelegate, this.onCreateDraftMessageCompletedDelegate, userState);
        }
        
        public void UpdateDraftMessage(string authToken, Midway.ObjectModel.DraftMessage draftMessage) {
            base.Channel.UpdateDraftMessage(authToken, draftMessage);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateDraftMessage(string authToken, Midway.ObjectModel.DraftMessage draftMessage, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateDraftMessage(authToken, draftMessage, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateDraftMessage(System.IAsyncResult result) {
            base.Channel.EndUpdateDraftMessage(result);
        }
        
        private System.IAsyncResult OnBeginUpdateDraftMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            Midway.ObjectModel.DraftMessage draftMessage = ((Midway.ObjectModel.DraftMessage)(inValues[1]));
            return this.BeginUpdateDraftMessage(authToken, draftMessage, callback, asyncState);
        }
        
        private object[] OnEndUpdateDraftMessage(System.IAsyncResult result) {
            this.EndUpdateDraftMessage(result);
            return null;
        }
        
        private void OnUpdateDraftMessageCompleted(object state) {
            if ((this.UpdateDraftMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateDraftMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateDraftMessageAsync(string authToken, Midway.ObjectModel.DraftMessage draftMessage) {
            this.UpdateDraftMessageAsync(authToken, draftMessage, null);
        }
        
        public void UpdateDraftMessageAsync(string authToken, Midway.ObjectModel.DraftMessage draftMessage, object userState) {
            if ((this.onBeginUpdateDraftMessageDelegate == null)) {
                this.onBeginUpdateDraftMessageDelegate = new BeginOperationDelegate(this.OnBeginUpdateDraftMessage);
            }
            if ((this.onEndUpdateDraftMessageDelegate == null)) {
                this.onEndUpdateDraftMessageDelegate = new EndOperationDelegate(this.OnEndUpdateDraftMessage);
            }
            if ((this.onUpdateDraftMessageCompletedDelegate == null)) {
                this.onUpdateDraftMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateDraftMessageCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateDraftMessageDelegate, new object[] {
                        authToken,
                        draftMessage}, this.onEndUpdateDraftMessageDelegate, this.onUpdateDraftMessageCompletedDelegate, userState);
        }
        
        public void DeleteDraftMessage(string authToken, string messageId) {
            base.Channel.DeleteDraftMessage(authToken, messageId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteDraftMessage(string authToken, string messageId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteDraftMessage(authToken, messageId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteDraftMessage(System.IAsyncResult result) {
            base.Channel.EndDeleteDraftMessage(result);
        }
        
        private System.IAsyncResult OnBeginDeleteDraftMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string messageId = ((string)(inValues[1]));
            return this.BeginDeleteDraftMessage(authToken, messageId, callback, asyncState);
        }
        
        private object[] OnEndDeleteDraftMessage(System.IAsyncResult result) {
            this.EndDeleteDraftMessage(result);
            return null;
        }
        
        private void OnDeleteDraftMessageCompleted(object state) {
            if ((this.DeleteDraftMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteDraftMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteDraftMessageAsync(string authToken, string messageId) {
            this.DeleteDraftMessageAsync(authToken, messageId, null);
        }
        
        public void DeleteDraftMessageAsync(string authToken, string messageId, object userState) {
            if ((this.onBeginDeleteDraftMessageDelegate == null)) {
                this.onBeginDeleteDraftMessageDelegate = new BeginOperationDelegate(this.OnBeginDeleteDraftMessage);
            }
            if ((this.onEndDeleteDraftMessageDelegate == null)) {
                this.onEndDeleteDraftMessageDelegate = new EndOperationDelegate(this.OnEndDeleteDraftMessage);
            }
            if ((this.onDeleteDraftMessageCompletedDelegate == null)) {
                this.onDeleteDraftMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteDraftMessageCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteDraftMessageDelegate, new object[] {
                        authToken,
                        messageId}, this.onEndDeleteDraftMessageDelegate, this.onDeleteDraftMessageCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.DraftMessage GetDraftMessage(string authToken, string messageId, bool getContent, bool getCard) {
            return base.Channel.GetDraftMessage(authToken, messageId, getContent, getCard);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDraftMessage(string authToken, string messageId, bool getContent, bool getCard, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDraftMessage(authToken, messageId, getContent, getCard, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.DraftMessage EndGetDraftMessage(System.IAsyncResult result) {
            return base.Channel.EndGetDraftMessage(result);
        }
        
        private System.IAsyncResult OnBeginGetDraftMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string messageId = ((string)(inValues[1]));
            bool getContent = ((bool)(inValues[2]));
            bool getCard = ((bool)(inValues[3]));
            return this.BeginGetDraftMessage(authToken, messageId, getContent, getCard, callback, asyncState);
        }
        
        private object[] OnEndGetDraftMessage(System.IAsyncResult result) {
            Midway.ObjectModel.DraftMessage retVal = this.EndGetDraftMessage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDraftMessageCompleted(object state) {
            if ((this.GetDraftMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDraftMessageCompleted(this, new GetDraftMessageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDraftMessageAsync(string authToken, string messageId, bool getContent, bool getCard) {
            this.GetDraftMessageAsync(authToken, messageId, getContent, getCard, null);
        }
        
        public void GetDraftMessageAsync(string authToken, string messageId, bool getContent, bool getCard, object userState) {
            if ((this.onBeginGetDraftMessageDelegate == null)) {
                this.onBeginGetDraftMessageDelegate = new BeginOperationDelegate(this.OnBeginGetDraftMessage);
            }
            if ((this.onEndGetDraftMessageDelegate == null)) {
                this.onEndGetDraftMessageDelegate = new EndOperationDelegate(this.OnEndGetDraftMessage);
            }
            if ((this.onGetDraftMessageCompletedDelegate == null)) {
                this.onGetDraftMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDraftMessageCompleted);
            }
            base.InvokeAsync(this.onBeginGetDraftMessageDelegate, new object[] {
                        authToken,
                        messageId,
                        getContent,
                        getCard}, this.onEndGetDraftMessageDelegate, this.onGetDraftMessageCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.DraftMessageSearchResult GetDraftMessageList(string authToken, string boxId, Midway.ObjectModel.Common.FetchingSettings settings) {
            return base.Channel.GetDraftMessageList(authToken, boxId, settings);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDraftMessageList(string authToken, string boxId, Midway.ObjectModel.Common.FetchingSettings settings, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDraftMessageList(authToken, boxId, settings, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.DraftMessageSearchResult EndGetDraftMessageList(System.IAsyncResult result) {
            return base.Channel.EndGetDraftMessageList(result);
        }
        
        private System.IAsyncResult OnBeginGetDraftMessageList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            Midway.ObjectModel.Common.FetchingSettings settings = ((Midway.ObjectModel.Common.FetchingSettings)(inValues[2]));
            return this.BeginGetDraftMessageList(authToken, boxId, settings, callback, asyncState);
        }
        
        private object[] OnEndGetDraftMessageList(System.IAsyncResult result) {
            Midway.ObjectModel.DraftMessageSearchResult retVal = this.EndGetDraftMessageList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDraftMessageListCompleted(object state) {
            if ((this.GetDraftMessageListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDraftMessageListCompleted(this, new GetDraftMessageListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDraftMessageListAsync(string authToken, string boxId, Midway.ObjectModel.Common.FetchingSettings settings) {
            this.GetDraftMessageListAsync(authToken, boxId, settings, null);
        }
        
        public void GetDraftMessageListAsync(string authToken, string boxId, Midway.ObjectModel.Common.FetchingSettings settings, object userState) {
            if ((this.onBeginGetDraftMessageListDelegate == null)) {
                this.onBeginGetDraftMessageListDelegate = new BeginOperationDelegate(this.OnBeginGetDraftMessageList);
            }
            if ((this.onEndGetDraftMessageListDelegate == null)) {
                this.onEndGetDraftMessageListDelegate = new EndOperationDelegate(this.OnEndGetDraftMessageList);
            }
            if ((this.onGetDraftMessageListCompletedDelegate == null)) {
                this.onGetDraftMessageListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDraftMessageListCompleted);
            }
            base.InvokeAsync(this.onBeginGetDraftMessageListDelegate, new object[] {
                        authToken,
                        boxId,
                        settings}, this.onEndGetDraftMessageListDelegate, this.onGetDraftMessageListCompletedDelegate, userState);
        }
        
        public int GetDraftMessageCount(string authToken, string boxId) {
            return base.Channel.GetDraftMessageCount(authToken, boxId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDraftMessageCount(string authToken, string boxId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDraftMessageCount(authToken, boxId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGetDraftMessageCount(System.IAsyncResult result) {
            return base.Channel.EndGetDraftMessageCount(result);
        }
        
        private System.IAsyncResult OnBeginGetDraftMessageCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            return this.BeginGetDraftMessageCount(authToken, boxId, callback, asyncState);
        }
        
        private object[] OnEndGetDraftMessageCount(System.IAsyncResult result) {
            int retVal = this.EndGetDraftMessageCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDraftMessageCountCompleted(object state) {
            if ((this.GetDraftMessageCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDraftMessageCountCompleted(this, new GetDraftMessageCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDraftMessageCountAsync(string authToken, string boxId) {
            this.GetDraftMessageCountAsync(authToken, boxId, null);
        }
        
        public void GetDraftMessageCountAsync(string authToken, string boxId, object userState) {
            if ((this.onBeginGetDraftMessageCountDelegate == null)) {
                this.onBeginGetDraftMessageCountDelegate = new BeginOperationDelegate(this.OnBeginGetDraftMessageCount);
            }
            if ((this.onEndGetDraftMessageCountDelegate == null)) {
                this.onEndGetDraftMessageCountDelegate = new EndOperationDelegate(this.OnEndGetDraftMessageCount);
            }
            if ((this.onGetDraftMessageCountCompletedDelegate == null)) {
                this.onGetDraftMessageCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDraftMessageCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetDraftMessageCountDelegate, new object[] {
                        authToken,
                        boxId}, this.onEndGetDraftMessageCountDelegate, this.onGetDraftMessageCountCompletedDelegate, userState);
        }
        
        public byte[] GetDraftDocumentContent(string authToken, string documentId) {
            return base.Channel.GetDraftDocumentContent(authToken, documentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDraftDocumentContent(string authToken, string documentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDraftDocumentContent(authToken, documentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public byte[] EndGetDraftDocumentContent(System.IAsyncResult result) {
            return base.Channel.EndGetDraftDocumentContent(result);
        }
        
        private System.IAsyncResult OnBeginGetDraftDocumentContent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string documentId = ((string)(inValues[1]));
            return this.BeginGetDraftDocumentContent(authToken, documentId, callback, asyncState);
        }
        
        private object[] OnEndGetDraftDocumentContent(System.IAsyncResult result) {
            byte[] retVal = this.EndGetDraftDocumentContent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDraftDocumentContentCompleted(object state) {
            if ((this.GetDraftDocumentContentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDraftDocumentContentCompleted(this, new GetDraftDocumentContentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDraftDocumentContentAsync(string authToken, string documentId) {
            this.GetDraftDocumentContentAsync(authToken, documentId, null);
        }
        
        public void GetDraftDocumentContentAsync(string authToken, string documentId, object userState) {
            if ((this.onBeginGetDraftDocumentContentDelegate == null)) {
                this.onBeginGetDraftDocumentContentDelegate = new BeginOperationDelegate(this.OnBeginGetDraftDocumentContent);
            }
            if ((this.onEndGetDraftDocumentContentDelegate == null)) {
                this.onEndGetDraftDocumentContentDelegate = new EndOperationDelegate(this.OnEndGetDraftDocumentContent);
            }
            if ((this.onGetDraftDocumentContentCompletedDelegate == null)) {
                this.onGetDraftDocumentContentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDraftDocumentContentCompleted);
            }
            base.InvokeAsync(this.onBeginGetDraftDocumentContentDelegate, new object[] {
                        authToken,
                        documentId}, this.onEndGetDraftDocumentContentDelegate, this.onGetDraftDocumentContentCompletedDelegate, userState);
        }
        
        public byte[] GetDraftDocumentCard(string authToken, string documentId) {
            return base.Channel.GetDraftDocumentCard(authToken, documentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDraftDocumentCard(string authToken, string documentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDraftDocumentCard(authToken, documentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public byte[] EndGetDraftDocumentCard(System.IAsyncResult result) {
            return base.Channel.EndGetDraftDocumentCard(result);
        }
        
        private System.IAsyncResult OnBeginGetDraftDocumentCard(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string documentId = ((string)(inValues[1]));
            return this.BeginGetDraftDocumentCard(authToken, documentId, callback, asyncState);
        }
        
        private object[] OnEndGetDraftDocumentCard(System.IAsyncResult result) {
            byte[] retVal = this.EndGetDraftDocumentCard(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDraftDocumentCardCompleted(object state) {
            if ((this.GetDraftDocumentCardCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDraftDocumentCardCompleted(this, new GetDraftDocumentCardCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDraftDocumentCardAsync(string authToken, string documentId) {
            this.GetDraftDocumentCardAsync(authToken, documentId, null);
        }
        
        public void GetDraftDocumentCardAsync(string authToken, string documentId, object userState) {
            if ((this.onBeginGetDraftDocumentCardDelegate == null)) {
                this.onBeginGetDraftDocumentCardDelegate = new BeginOperationDelegate(this.OnBeginGetDraftDocumentCard);
            }
            if ((this.onEndGetDraftDocumentCardDelegate == null)) {
                this.onEndGetDraftDocumentCardDelegate = new EndOperationDelegate(this.OnEndGetDraftDocumentCard);
            }
            if ((this.onGetDraftDocumentCardCompletedDelegate == null)) {
                this.onGetDraftDocumentCardCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDraftDocumentCardCompleted);
            }
            base.InvokeAsync(this.onBeginGetDraftDocumentCardDelegate, new object[] {
                        authToken,
                        documentId}, this.onEndGetDraftDocumentCardDelegate, this.onGetDraftDocumentCardCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.NamedContent GenerateInvoiceReceipt(string authToken, string boxId, string documentId) {
            return base.Channel.GenerateInvoiceReceipt(authToken, boxId, documentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGenerateInvoiceReceipt(string authToken, string boxId, string documentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGenerateInvoiceReceipt(authToken, boxId, documentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.NamedContent EndGenerateInvoiceReceipt(System.IAsyncResult result) {
            return base.Channel.EndGenerateInvoiceReceipt(result);
        }
        
        private System.IAsyncResult OnBeginGenerateInvoiceReceipt(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            string documentId = ((string)(inValues[2]));
            return this.BeginGenerateInvoiceReceipt(authToken, boxId, documentId, callback, asyncState);
        }
        
        private object[] OnEndGenerateInvoiceReceipt(System.IAsyncResult result) {
            Midway.ObjectModel.NamedContent retVal = this.EndGenerateInvoiceReceipt(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGenerateInvoiceReceiptCompleted(object state) {
            if ((this.GenerateInvoiceReceiptCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GenerateInvoiceReceiptCompleted(this, new GenerateInvoiceReceiptCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GenerateInvoiceReceiptAsync(string authToken, string boxId, string documentId) {
            this.GenerateInvoiceReceiptAsync(authToken, boxId, documentId, null);
        }
        
        public void GenerateInvoiceReceiptAsync(string authToken, string boxId, string documentId, object userState) {
            if ((this.onBeginGenerateInvoiceReceiptDelegate == null)) {
                this.onBeginGenerateInvoiceReceiptDelegate = new BeginOperationDelegate(this.OnBeginGenerateInvoiceReceipt);
            }
            if ((this.onEndGenerateInvoiceReceiptDelegate == null)) {
                this.onEndGenerateInvoiceReceiptDelegate = new EndOperationDelegate(this.OnEndGenerateInvoiceReceipt);
            }
            if ((this.onGenerateInvoiceReceiptCompletedDelegate == null)) {
                this.onGenerateInvoiceReceiptCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGenerateInvoiceReceiptCompleted);
            }
            base.InvokeAsync(this.onBeginGenerateInvoiceReceiptDelegate, new object[] {
                        authToken,
                        boxId,
                        documentId}, this.onEndGenerateInvoiceReceiptDelegate, this.onGenerateInvoiceReceiptCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.NamedContent GenerateInvoiceReceiptV2(string authToken, string boxId, string documentId, string certThumbprint) {
            return base.Channel.GenerateInvoiceReceiptV2(authToken, boxId, documentId, certThumbprint);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGenerateInvoiceReceiptV2(string authToken, string boxId, string documentId, string certThumbprint, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGenerateInvoiceReceiptV2(authToken, boxId, documentId, certThumbprint, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.NamedContent EndGenerateInvoiceReceiptV2(System.IAsyncResult result) {
            return base.Channel.EndGenerateInvoiceReceiptV2(result);
        }
        
        private System.IAsyncResult OnBeginGenerateInvoiceReceiptV2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            string documentId = ((string)(inValues[2]));
            string certThumbprint = ((string)(inValues[3]));
            return this.BeginGenerateInvoiceReceiptV2(authToken, boxId, documentId, certThumbprint, callback, asyncState);
        }
        
        private object[] OnEndGenerateInvoiceReceiptV2(System.IAsyncResult result) {
            Midway.ObjectModel.NamedContent retVal = this.EndGenerateInvoiceReceiptV2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGenerateInvoiceReceiptV2Completed(object state) {
            if ((this.GenerateInvoiceReceiptV2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GenerateInvoiceReceiptV2Completed(this, new GenerateInvoiceReceiptV2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GenerateInvoiceReceiptV2Async(string authToken, string boxId, string documentId, string certThumbprint) {
            this.GenerateInvoiceReceiptV2Async(authToken, boxId, documentId, certThumbprint, null);
        }
        
        public void GenerateInvoiceReceiptV2Async(string authToken, string boxId, string documentId, string certThumbprint, object userState) {
            if ((this.onBeginGenerateInvoiceReceiptV2Delegate == null)) {
                this.onBeginGenerateInvoiceReceiptV2Delegate = new BeginOperationDelegate(this.OnBeginGenerateInvoiceReceiptV2);
            }
            if ((this.onEndGenerateInvoiceReceiptV2Delegate == null)) {
                this.onEndGenerateInvoiceReceiptV2Delegate = new EndOperationDelegate(this.OnEndGenerateInvoiceReceiptV2);
            }
            if ((this.onGenerateInvoiceReceiptV2CompletedDelegate == null)) {
                this.onGenerateInvoiceReceiptV2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGenerateInvoiceReceiptV2Completed);
            }
            base.InvokeAsync(this.onBeginGenerateInvoiceReceiptV2Delegate, new object[] {
                        authToken,
                        boxId,
                        documentId,
                        certThumbprint}, this.onEndGenerateInvoiceReceiptV2Delegate, this.onGenerateInvoiceReceiptV2CompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.NamedContent GenerateInvoiceAmendmentRequest(string authToken, string boxId, string documentId, string text) {
            return base.Channel.GenerateInvoiceAmendmentRequest(authToken, boxId, documentId, text);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGenerateInvoiceAmendmentRequest(string authToken, string boxId, string documentId, string text, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGenerateInvoiceAmendmentRequest(authToken, boxId, documentId, text, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.NamedContent EndGenerateInvoiceAmendmentRequest(System.IAsyncResult result) {
            return base.Channel.EndGenerateInvoiceAmendmentRequest(result);
        }
        
        private System.IAsyncResult OnBeginGenerateInvoiceAmendmentRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            string documentId = ((string)(inValues[2]));
            string text = ((string)(inValues[3]));
            return this.BeginGenerateInvoiceAmendmentRequest(authToken, boxId, documentId, text, callback, asyncState);
        }
        
        private object[] OnEndGenerateInvoiceAmendmentRequest(System.IAsyncResult result) {
            Midway.ObjectModel.NamedContent retVal = this.EndGenerateInvoiceAmendmentRequest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGenerateInvoiceAmendmentRequestCompleted(object state) {
            if ((this.GenerateInvoiceAmendmentRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GenerateInvoiceAmendmentRequestCompleted(this, new GenerateInvoiceAmendmentRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GenerateInvoiceAmendmentRequestAsync(string authToken, string boxId, string documentId, string text) {
            this.GenerateInvoiceAmendmentRequestAsync(authToken, boxId, documentId, text, null);
        }
        
        public void GenerateInvoiceAmendmentRequestAsync(string authToken, string boxId, string documentId, string text, object userState) {
            if ((this.onBeginGenerateInvoiceAmendmentRequestDelegate == null)) {
                this.onBeginGenerateInvoiceAmendmentRequestDelegate = new BeginOperationDelegate(this.OnBeginGenerateInvoiceAmendmentRequest);
            }
            if ((this.onEndGenerateInvoiceAmendmentRequestDelegate == null)) {
                this.onEndGenerateInvoiceAmendmentRequestDelegate = new EndOperationDelegate(this.OnEndGenerateInvoiceAmendmentRequest);
            }
            if ((this.onGenerateInvoiceAmendmentRequestCompletedDelegate == null)) {
                this.onGenerateInvoiceAmendmentRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGenerateInvoiceAmendmentRequestCompleted);
            }
            base.InvokeAsync(this.onBeginGenerateInvoiceAmendmentRequestDelegate, new object[] {
                        authToken,
                        boxId,
                        documentId,
                        text}, this.onEndGenerateInvoiceAmendmentRequestDelegate, this.onGenerateInvoiceAmendmentRequestCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.NamedContent GenerateInvoiceAmendmentRequestV2(string authToken, string boxId, string documentId, string certThumbprint, string text) {
            return base.Channel.GenerateInvoiceAmendmentRequestV2(authToken, boxId, documentId, certThumbprint, text);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGenerateInvoiceAmendmentRequestV2(string authToken, string boxId, string documentId, string certThumbprint, string text, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGenerateInvoiceAmendmentRequestV2(authToken, boxId, documentId, certThumbprint, text, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.NamedContent EndGenerateInvoiceAmendmentRequestV2(System.IAsyncResult result) {
            return base.Channel.EndGenerateInvoiceAmendmentRequestV2(result);
        }
        
        private System.IAsyncResult OnBeginGenerateInvoiceAmendmentRequestV2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            string documentId = ((string)(inValues[2]));
            string certThumbprint = ((string)(inValues[3]));
            string text = ((string)(inValues[4]));
            return this.BeginGenerateInvoiceAmendmentRequestV2(authToken, boxId, documentId, certThumbprint, text, callback, asyncState);
        }
        
        private object[] OnEndGenerateInvoiceAmendmentRequestV2(System.IAsyncResult result) {
            Midway.ObjectModel.NamedContent retVal = this.EndGenerateInvoiceAmendmentRequestV2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGenerateInvoiceAmendmentRequestV2Completed(object state) {
            if ((this.GenerateInvoiceAmendmentRequestV2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GenerateInvoiceAmendmentRequestV2Completed(this, new GenerateInvoiceAmendmentRequestV2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GenerateInvoiceAmendmentRequestV2Async(string authToken, string boxId, string documentId, string certThumbprint, string text) {
            this.GenerateInvoiceAmendmentRequestV2Async(authToken, boxId, documentId, certThumbprint, text, null);
        }
        
        public void GenerateInvoiceAmendmentRequestV2Async(string authToken, string boxId, string documentId, string certThumbprint, string text, object userState) {
            if ((this.onBeginGenerateInvoiceAmendmentRequestV2Delegate == null)) {
                this.onBeginGenerateInvoiceAmendmentRequestV2Delegate = new BeginOperationDelegate(this.OnBeginGenerateInvoiceAmendmentRequestV2);
            }
            if ((this.onEndGenerateInvoiceAmendmentRequestV2Delegate == null)) {
                this.onEndGenerateInvoiceAmendmentRequestV2Delegate = new EndOperationDelegate(this.OnEndGenerateInvoiceAmendmentRequestV2);
            }
            if ((this.onGenerateInvoiceAmendmentRequestV2CompletedDelegate == null)) {
                this.onGenerateInvoiceAmendmentRequestV2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGenerateInvoiceAmendmentRequestV2Completed);
            }
            base.InvokeAsync(this.onBeginGenerateInvoiceAmendmentRequestV2Delegate, new object[] {
                        authToken,
                        boxId,
                        documentId,
                        certThumbprint,
                        text}, this.onEndGenerateInvoiceAmendmentRequestV2Delegate, this.onGenerateInvoiceAmendmentRequestV2CompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.NamedContent GenerateDeliveryConfirmation(string authToken, string boxId, string documentId) {
            return base.Channel.GenerateDeliveryConfirmation(authToken, boxId, documentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGenerateDeliveryConfirmation(string authToken, string boxId, string documentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGenerateDeliveryConfirmation(authToken, boxId, documentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.NamedContent EndGenerateDeliveryConfirmation(System.IAsyncResult result) {
            return base.Channel.EndGenerateDeliveryConfirmation(result);
        }
        
        private System.IAsyncResult OnBeginGenerateDeliveryConfirmation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            string documentId = ((string)(inValues[2]));
            return this.BeginGenerateDeliveryConfirmation(authToken, boxId, documentId, callback, asyncState);
        }
        
        private object[] OnEndGenerateDeliveryConfirmation(System.IAsyncResult result) {
            Midway.ObjectModel.NamedContent retVal = this.EndGenerateDeliveryConfirmation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGenerateDeliveryConfirmationCompleted(object state) {
            if ((this.GenerateDeliveryConfirmationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GenerateDeliveryConfirmationCompleted(this, new GenerateDeliveryConfirmationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GenerateDeliveryConfirmationAsync(string authToken, string boxId, string documentId) {
            this.GenerateDeliveryConfirmationAsync(authToken, boxId, documentId, null);
        }
        
        public void GenerateDeliveryConfirmationAsync(string authToken, string boxId, string documentId, object userState) {
            if ((this.onBeginGenerateDeliveryConfirmationDelegate == null)) {
                this.onBeginGenerateDeliveryConfirmationDelegate = new BeginOperationDelegate(this.OnBeginGenerateDeliveryConfirmation);
            }
            if ((this.onEndGenerateDeliveryConfirmationDelegate == null)) {
                this.onEndGenerateDeliveryConfirmationDelegate = new EndOperationDelegate(this.OnEndGenerateDeliveryConfirmation);
            }
            if ((this.onGenerateDeliveryConfirmationCompletedDelegate == null)) {
                this.onGenerateDeliveryConfirmationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGenerateDeliveryConfirmationCompleted);
            }
            base.InvokeAsync(this.onBeginGenerateDeliveryConfirmationDelegate, new object[] {
                        authToken,
                        boxId,
                        documentId}, this.onEndGenerateDeliveryConfirmationDelegate, this.onGenerateDeliveryConfirmationCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.NamedContent GenerateDeliveryConfirmationV2(string authToken, string boxId, string documentId, string certThumbprint) {
            return base.Channel.GenerateDeliveryConfirmationV2(authToken, boxId, documentId, certThumbprint);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGenerateDeliveryConfirmationV2(string authToken, string boxId, string documentId, string certThumbprint, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGenerateDeliveryConfirmationV2(authToken, boxId, documentId, certThumbprint, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.NamedContent EndGenerateDeliveryConfirmationV2(System.IAsyncResult result) {
            return base.Channel.EndGenerateDeliveryConfirmationV2(result);
        }
        
        private System.IAsyncResult OnBeginGenerateDeliveryConfirmationV2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            string documentId = ((string)(inValues[2]));
            string certThumbprint = ((string)(inValues[3]));
            return this.BeginGenerateDeliveryConfirmationV2(authToken, boxId, documentId, certThumbprint, callback, asyncState);
        }
        
        private object[] OnEndGenerateDeliveryConfirmationV2(System.IAsyncResult result) {
            Midway.ObjectModel.NamedContent retVal = this.EndGenerateDeliveryConfirmationV2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGenerateDeliveryConfirmationV2Completed(object state) {
            if ((this.GenerateDeliveryConfirmationV2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GenerateDeliveryConfirmationV2Completed(this, new GenerateDeliveryConfirmationV2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GenerateDeliveryConfirmationV2Async(string authToken, string boxId, string documentId, string certThumbprint) {
            this.GenerateDeliveryConfirmationV2Async(authToken, boxId, documentId, certThumbprint, null);
        }
        
        public void GenerateDeliveryConfirmationV2Async(string authToken, string boxId, string documentId, string certThumbprint, object userState) {
            if ((this.onBeginGenerateDeliveryConfirmationV2Delegate == null)) {
                this.onBeginGenerateDeliveryConfirmationV2Delegate = new BeginOperationDelegate(this.OnBeginGenerateDeliveryConfirmationV2);
            }
            if ((this.onEndGenerateDeliveryConfirmationV2Delegate == null)) {
                this.onEndGenerateDeliveryConfirmationV2Delegate = new EndOperationDelegate(this.OnEndGenerateDeliveryConfirmationV2);
            }
            if ((this.onGenerateDeliveryConfirmationV2CompletedDelegate == null)) {
                this.onGenerateDeliveryConfirmationV2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGenerateDeliveryConfirmationV2Completed);
            }
            base.InvokeAsync(this.onBeginGenerateDeliveryConfirmationV2Delegate, new object[] {
                        authToken,
                        boxId,
                        documentId,
                        certThumbprint}, this.onEndGenerateDeliveryConfirmationV2Delegate, this.onGenerateDeliveryConfirmationV2CompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.NamedContent GenerateAmendmentRequest(string authToken, string boxId, string documentId, string text) {
            return base.Channel.GenerateAmendmentRequest(authToken, boxId, documentId, text);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGenerateAmendmentRequest(string authToken, string boxId, string documentId, string text, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGenerateAmendmentRequest(authToken, boxId, documentId, text, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.NamedContent EndGenerateAmendmentRequest(System.IAsyncResult result) {
            return base.Channel.EndGenerateAmendmentRequest(result);
        }
        
        private System.IAsyncResult OnBeginGenerateAmendmentRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            string documentId = ((string)(inValues[2]));
            string text = ((string)(inValues[3]));
            return this.BeginGenerateAmendmentRequest(authToken, boxId, documentId, text, callback, asyncState);
        }
        
        private object[] OnEndGenerateAmendmentRequest(System.IAsyncResult result) {
            Midway.ObjectModel.NamedContent retVal = this.EndGenerateAmendmentRequest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGenerateAmendmentRequestCompleted(object state) {
            if ((this.GenerateAmendmentRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GenerateAmendmentRequestCompleted(this, new GenerateAmendmentRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GenerateAmendmentRequestAsync(string authToken, string boxId, string documentId, string text) {
            this.GenerateAmendmentRequestAsync(authToken, boxId, documentId, text, null);
        }
        
        public void GenerateAmendmentRequestAsync(string authToken, string boxId, string documentId, string text, object userState) {
            if ((this.onBeginGenerateAmendmentRequestDelegate == null)) {
                this.onBeginGenerateAmendmentRequestDelegate = new BeginOperationDelegate(this.OnBeginGenerateAmendmentRequest);
            }
            if ((this.onEndGenerateAmendmentRequestDelegate == null)) {
                this.onEndGenerateAmendmentRequestDelegate = new EndOperationDelegate(this.OnEndGenerateAmendmentRequest);
            }
            if ((this.onGenerateAmendmentRequestCompletedDelegate == null)) {
                this.onGenerateAmendmentRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGenerateAmendmentRequestCompleted);
            }
            base.InvokeAsync(this.onBeginGenerateAmendmentRequestDelegate, new object[] {
                        authToken,
                        boxId,
                        documentId,
                        text}, this.onEndGenerateAmendmentRequestDelegate, this.onGenerateAmendmentRequestCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.NamedContent GenerateAmendmentRequestV2(string authToken, string boxId, string documentId, string certThumbprint, string text) {
            return base.Channel.GenerateAmendmentRequestV2(authToken, boxId, documentId, certThumbprint, text);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGenerateAmendmentRequestV2(string authToken, string boxId, string documentId, string certThumbprint, string text, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGenerateAmendmentRequestV2(authToken, boxId, documentId, certThumbprint, text, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.NamedContent EndGenerateAmendmentRequestV2(System.IAsyncResult result) {
            return base.Channel.EndGenerateAmendmentRequestV2(result);
        }
        
        private System.IAsyncResult OnBeginGenerateAmendmentRequestV2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            string documentId = ((string)(inValues[2]));
            string certThumbprint = ((string)(inValues[3]));
            string text = ((string)(inValues[4]));
            return this.BeginGenerateAmendmentRequestV2(authToken, boxId, documentId, certThumbprint, text, callback, asyncState);
        }
        
        private object[] OnEndGenerateAmendmentRequestV2(System.IAsyncResult result) {
            Midway.ObjectModel.NamedContent retVal = this.EndGenerateAmendmentRequestV2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGenerateAmendmentRequestV2Completed(object state) {
            if ((this.GenerateAmendmentRequestV2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GenerateAmendmentRequestV2Completed(this, new GenerateAmendmentRequestV2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GenerateAmendmentRequestV2Async(string authToken, string boxId, string documentId, string certThumbprint, string text) {
            this.GenerateAmendmentRequestV2Async(authToken, boxId, documentId, certThumbprint, text, null);
        }
        
        public void GenerateAmendmentRequestV2Async(string authToken, string boxId, string documentId, string certThumbprint, string text, object userState) {
            if ((this.onBeginGenerateAmendmentRequestV2Delegate == null)) {
                this.onBeginGenerateAmendmentRequestV2Delegate = new BeginOperationDelegate(this.OnBeginGenerateAmendmentRequestV2);
            }
            if ((this.onEndGenerateAmendmentRequestV2Delegate == null)) {
                this.onEndGenerateAmendmentRequestV2Delegate = new EndOperationDelegate(this.OnEndGenerateAmendmentRequestV2);
            }
            if ((this.onGenerateAmendmentRequestV2CompletedDelegate == null)) {
                this.onGenerateAmendmentRequestV2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGenerateAmendmentRequestV2Completed);
            }
            base.InvokeAsync(this.onBeginGenerateAmendmentRequestV2Delegate, new object[] {
                        authToken,
                        boxId,
                        documentId,
                        certThumbprint,
                        text}, this.onEndGenerateAmendmentRequestV2Delegate, this.onGenerateAmendmentRequestV2CompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.NamedContent GenerateTitleBuyer(string authToken, string boxId, string documentId, Midway.ObjectModel.TitleBuyer text, Midway.ObjectModel.SignerInfo signerInfo) {
            return base.Channel.GenerateTitleBuyer(authToken, boxId, documentId, text, signerInfo);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGenerateTitleBuyer(string authToken, string boxId, string documentId, Midway.ObjectModel.TitleBuyer text, Midway.ObjectModel.SignerInfo signerInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGenerateTitleBuyer(authToken, boxId, documentId, text, signerInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.NamedContent EndGenerateTitleBuyer(System.IAsyncResult result) {
            return base.Channel.EndGenerateTitleBuyer(result);
        }
        
        private System.IAsyncResult OnBeginGenerateTitleBuyer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            string documentId = ((string)(inValues[2]));
            Midway.ObjectModel.TitleBuyer text = ((Midway.ObjectModel.TitleBuyer)(inValues[3]));
            Midway.ObjectModel.SignerInfo signerInfo = ((Midway.ObjectModel.SignerInfo)(inValues[4]));
            return this.BeginGenerateTitleBuyer(authToken, boxId, documentId, text, signerInfo, callback, asyncState);
        }
        
        private object[] OnEndGenerateTitleBuyer(System.IAsyncResult result) {
            Midway.ObjectModel.NamedContent retVal = this.EndGenerateTitleBuyer(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGenerateTitleBuyerCompleted(object state) {
            if ((this.GenerateTitleBuyerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GenerateTitleBuyerCompleted(this, new GenerateTitleBuyerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GenerateTitleBuyerAsync(string authToken, string boxId, string documentId, Midway.ObjectModel.TitleBuyer text, Midway.ObjectModel.SignerInfo signerInfo) {
            this.GenerateTitleBuyerAsync(authToken, boxId, documentId, text, signerInfo, null);
        }
        
        public void GenerateTitleBuyerAsync(string authToken, string boxId, string documentId, Midway.ObjectModel.TitleBuyer text, Midway.ObjectModel.SignerInfo signerInfo, object userState) {
            if ((this.onBeginGenerateTitleBuyerDelegate == null)) {
                this.onBeginGenerateTitleBuyerDelegate = new BeginOperationDelegate(this.OnBeginGenerateTitleBuyer);
            }
            if ((this.onEndGenerateTitleBuyerDelegate == null)) {
                this.onEndGenerateTitleBuyerDelegate = new EndOperationDelegate(this.OnEndGenerateTitleBuyer);
            }
            if ((this.onGenerateTitleBuyerCompletedDelegate == null)) {
                this.onGenerateTitleBuyerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGenerateTitleBuyerCompleted);
            }
            base.InvokeAsync(this.onBeginGenerateTitleBuyerDelegate, new object[] {
                        authToken,
                        boxId,
                        documentId,
                        text,
                        signerInfo}, this.onEndGenerateTitleBuyerDelegate, this.onGenerateTitleBuyerCompletedDelegate, userState);
        }
        
        public byte[] GetDocumentContent(string authToken, string boxId, string documentId) {
            return base.Channel.GetDocumentContent(authToken, boxId, documentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDocumentContent(string authToken, string boxId, string documentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDocumentContent(authToken, boxId, documentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public byte[] EndGetDocumentContent(System.IAsyncResult result) {
            return base.Channel.EndGetDocumentContent(result);
        }
        
        private System.IAsyncResult OnBeginGetDocumentContent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            string documentId = ((string)(inValues[2]));
            return this.BeginGetDocumentContent(authToken, boxId, documentId, callback, asyncState);
        }
        
        private object[] OnEndGetDocumentContent(System.IAsyncResult result) {
            byte[] retVal = this.EndGetDocumentContent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDocumentContentCompleted(object state) {
            if ((this.GetDocumentContentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDocumentContentCompleted(this, new GetDocumentContentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDocumentContentAsync(string authToken, string boxId, string documentId) {
            this.GetDocumentContentAsync(authToken, boxId, documentId, null);
        }
        
        public void GetDocumentContentAsync(string authToken, string boxId, string documentId, object userState) {
            if ((this.onBeginGetDocumentContentDelegate == null)) {
                this.onBeginGetDocumentContentDelegate = new BeginOperationDelegate(this.OnBeginGetDocumentContent);
            }
            if ((this.onEndGetDocumentContentDelegate == null)) {
                this.onEndGetDocumentContentDelegate = new EndOperationDelegate(this.OnEndGetDocumentContent);
            }
            if ((this.onGetDocumentContentCompletedDelegate == null)) {
                this.onGetDocumentContentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDocumentContentCompleted);
            }
            base.InvokeAsync(this.onBeginGetDocumentContentDelegate, new object[] {
                        authToken,
                        boxId,
                        documentId}, this.onEndGetDocumentContentDelegate, this.onGetDocumentContentCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.FullDocumentInfo GetFullDocumentInfo(string authToken, string boxId, string documentId, Midway.ObjectModel.FullDocumentInfoRequestParams requestParams) {
            return base.Channel.GetFullDocumentInfo(authToken, boxId, documentId, requestParams);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFullDocumentInfo(string authToken, string boxId, string documentId, Midway.ObjectModel.FullDocumentInfoRequestParams requestParams, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFullDocumentInfo(authToken, boxId, documentId, requestParams, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.FullDocumentInfo EndGetFullDocumentInfo(System.IAsyncResult result) {
            return base.Channel.EndGetFullDocumentInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetFullDocumentInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            string documentId = ((string)(inValues[2]));
            Midway.ObjectModel.FullDocumentInfoRequestParams requestParams = ((Midway.ObjectModel.FullDocumentInfoRequestParams)(inValues[3]));
            return this.BeginGetFullDocumentInfo(authToken, boxId, documentId, requestParams, callback, asyncState);
        }
        
        private object[] OnEndGetFullDocumentInfo(System.IAsyncResult result) {
            Midway.ObjectModel.FullDocumentInfo retVal = this.EndGetFullDocumentInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFullDocumentInfoCompleted(object state) {
            if ((this.GetFullDocumentInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFullDocumentInfoCompleted(this, new GetFullDocumentInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFullDocumentInfoAsync(string authToken, string boxId, string documentId, Midway.ObjectModel.FullDocumentInfoRequestParams requestParams) {
            this.GetFullDocumentInfoAsync(authToken, boxId, documentId, requestParams, null);
        }
        
        public void GetFullDocumentInfoAsync(string authToken, string boxId, string documentId, Midway.ObjectModel.FullDocumentInfoRequestParams requestParams, object userState) {
            if ((this.onBeginGetFullDocumentInfoDelegate == null)) {
                this.onBeginGetFullDocumentInfoDelegate = new BeginOperationDelegate(this.OnBeginGetFullDocumentInfo);
            }
            if ((this.onEndGetFullDocumentInfoDelegate == null)) {
                this.onEndGetFullDocumentInfoDelegate = new EndOperationDelegate(this.OnEndGetFullDocumentInfo);
            }
            if ((this.onGetFullDocumentInfoCompletedDelegate == null)) {
                this.onGetFullDocumentInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFullDocumentInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetFullDocumentInfoDelegate, new object[] {
                        authToken,
                        boxId,
                        documentId,
                        requestParams}, this.onEndGetFullDocumentInfoDelegate, this.onGetFullDocumentInfoCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.DocumentList GetDocumentList(string authToken, Midway.ObjectModel.DocumentListOptions options) {
            return base.Channel.GetDocumentList(authToken, options);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDocumentList(string authToken, Midway.ObjectModel.DocumentListOptions options, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDocumentList(authToken, options, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.DocumentList EndGetDocumentList(System.IAsyncResult result) {
            return base.Channel.EndGetDocumentList(result);
        }
        
        private System.IAsyncResult OnBeginGetDocumentList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            Midway.ObjectModel.DocumentListOptions options = ((Midway.ObjectModel.DocumentListOptions)(inValues[1]));
            return this.BeginGetDocumentList(authToken, options, callback, asyncState);
        }
        
        private object[] OnEndGetDocumentList(System.IAsyncResult result) {
            Midway.ObjectModel.DocumentList retVal = this.EndGetDocumentList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDocumentListCompleted(object state) {
            if ((this.GetDocumentListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDocumentListCompleted(this, new GetDocumentListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDocumentListAsync(string authToken, Midway.ObjectModel.DocumentListOptions options) {
            this.GetDocumentListAsync(authToken, options, null);
        }
        
        public void GetDocumentListAsync(string authToken, Midway.ObjectModel.DocumentListOptions options, object userState) {
            if ((this.onBeginGetDocumentListDelegate == null)) {
                this.onBeginGetDocumentListDelegate = new BeginOperationDelegate(this.OnBeginGetDocumentList);
            }
            if ((this.onEndGetDocumentListDelegate == null)) {
                this.onEndGetDocumentListDelegate = new EndOperationDelegate(this.OnEndGetDocumentList);
            }
            if ((this.onGetDocumentListCompletedDelegate == null)) {
                this.onGetDocumentListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDocumentListCompleted);
            }
            base.InvokeAsync(this.onBeginGetDocumentListDelegate, new object[] {
                        authToken,
                        options}, this.onEndGetDocumentListDelegate, this.onGetDocumentListCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.InnKppName GetInnKppNameByBoxId(string token, string boxId) {
            return base.Channel.GetInnKppNameByBoxId(token, boxId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetInnKppNameByBoxId(string token, string boxId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInnKppNameByBoxId(token, boxId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.InnKppName EndGetInnKppNameByBoxId(System.IAsyncResult result) {
            return base.Channel.EndGetInnKppNameByBoxId(result);
        }
        
        private System.IAsyncResult OnBeginGetInnKppNameByBoxId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string token = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            return this.BeginGetInnKppNameByBoxId(token, boxId, callback, asyncState);
        }
        
        private object[] OnEndGetInnKppNameByBoxId(System.IAsyncResult result) {
            Midway.ObjectModel.InnKppName retVal = this.EndGetInnKppNameByBoxId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInnKppNameByBoxIdCompleted(object state) {
            if ((this.GetInnKppNameByBoxIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInnKppNameByBoxIdCompleted(this, new GetInnKppNameByBoxIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInnKppNameByBoxIdAsync(string token, string boxId) {
            this.GetInnKppNameByBoxIdAsync(token, boxId, null);
        }
        
        public void GetInnKppNameByBoxIdAsync(string token, string boxId, object userState) {
            if ((this.onBeginGetInnKppNameByBoxIdDelegate == null)) {
                this.onBeginGetInnKppNameByBoxIdDelegate = new BeginOperationDelegate(this.OnBeginGetInnKppNameByBoxId);
            }
            if ((this.onEndGetInnKppNameByBoxIdDelegate == null)) {
                this.onEndGetInnKppNameByBoxIdDelegate = new EndOperationDelegate(this.OnEndGetInnKppNameByBoxId);
            }
            if ((this.onGetInnKppNameByBoxIdCompletedDelegate == null)) {
                this.onGetInnKppNameByBoxIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInnKppNameByBoxIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetInnKppNameByBoxIdDelegate, new object[] {
                        token,
                        boxId}, this.onEndGetInnKppNameByBoxIdDelegate, this.onGetInnKppNameByBoxIdCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.ContactSearchResult SearchContacts(string authToken, Midway.ObjectModel.ContactSearchOptions contactSearchOptions) {
            return base.Channel.SearchContacts(authToken, contactSearchOptions);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSearchContacts(string authToken, Midway.ObjectModel.ContactSearchOptions contactSearchOptions, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSearchContacts(authToken, contactSearchOptions, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.ContactSearchResult EndSearchContacts(System.IAsyncResult result) {
            return base.Channel.EndSearchContacts(result);
        }
        
        private System.IAsyncResult OnBeginSearchContacts(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            Midway.ObjectModel.ContactSearchOptions contactSearchOptions = ((Midway.ObjectModel.ContactSearchOptions)(inValues[1]));
            return this.BeginSearchContacts(authToken, contactSearchOptions, callback, asyncState);
        }
        
        private object[] OnEndSearchContacts(System.IAsyncResult result) {
            Midway.ObjectModel.ContactSearchResult retVal = this.EndSearchContacts(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSearchContactsCompleted(object state) {
            if ((this.SearchContactsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SearchContactsCompleted(this, new SearchContactsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SearchContactsAsync(string authToken, Midway.ObjectModel.ContactSearchOptions contactSearchOptions) {
            this.SearchContactsAsync(authToken, contactSearchOptions, null);
        }
        
        public void SearchContactsAsync(string authToken, Midway.ObjectModel.ContactSearchOptions contactSearchOptions, object userState) {
            if ((this.onBeginSearchContactsDelegate == null)) {
                this.onBeginSearchContactsDelegate = new BeginOperationDelegate(this.OnBeginSearchContacts);
            }
            if ((this.onEndSearchContactsDelegate == null)) {
                this.onEndSearchContactsDelegate = new EndOperationDelegate(this.OnEndSearchContacts);
            }
            if ((this.onSearchContactsCompletedDelegate == null)) {
                this.onSearchContactsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSearchContactsCompleted);
            }
            base.InvokeAsync(this.onBeginSearchContactsDelegate, new object[] {
                        authToken,
                        contactSearchOptions}, this.onEndSearchContactsDelegate, this.onSearchContactsCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.Contact GetContact(string authToken, int organizationId, int contragentId) {
            return base.Channel.GetContact(authToken, organizationId, contragentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetContact(string authToken, int organizationId, int contragentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetContact(authToken, organizationId, contragentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.Contact EndGetContact(System.IAsyncResult result) {
            return base.Channel.EndGetContact(result);
        }
        
        private System.IAsyncResult OnBeginGetContact(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            int organizationId = ((int)(inValues[1]));
            int contragentId = ((int)(inValues[2]));
            return this.BeginGetContact(authToken, organizationId, contragentId, callback, asyncState);
        }
        
        private object[] OnEndGetContact(System.IAsyncResult result) {
            Midway.ObjectModel.Contact retVal = this.EndGetContact(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetContactCompleted(object state) {
            if ((this.GetContactCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetContactCompleted(this, new GetContactCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetContactAsync(string authToken, int organizationId, int contragentId) {
            this.GetContactAsync(authToken, organizationId, contragentId, null);
        }
        
        public void GetContactAsync(string authToken, int organizationId, int contragentId, object userState) {
            if ((this.onBeginGetContactDelegate == null)) {
                this.onBeginGetContactDelegate = new BeginOperationDelegate(this.OnBeginGetContact);
            }
            if ((this.onEndGetContactDelegate == null)) {
                this.onEndGetContactDelegate = new EndOperationDelegate(this.OnEndGetContact);
            }
            if ((this.onGetContactCompletedDelegate == null)) {
                this.onGetContactCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetContactCompleted);
            }
            base.InvokeAsync(this.onBeginGetContactDelegate, new object[] {
                        authToken,
                        organizationId,
                        contragentId}, this.onEndGetContactDelegate, this.onGetContactCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.ContactStatus AcceptAuthorization(string authToken, int organizationId, int contragentId, string comment) {
            return base.Channel.AcceptAuthorization(authToken, organizationId, contragentId, comment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAcceptAuthorization(string authToken, int organizationId, int contragentId, string comment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAcceptAuthorization(authToken, organizationId, contragentId, comment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.ContactStatus EndAcceptAuthorization(System.IAsyncResult result) {
            return base.Channel.EndAcceptAuthorization(result);
        }
        
        private System.IAsyncResult OnBeginAcceptAuthorization(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            int organizationId = ((int)(inValues[1]));
            int contragentId = ((int)(inValues[2]));
            string comment = ((string)(inValues[3]));
            return this.BeginAcceptAuthorization(authToken, organizationId, contragentId, comment, callback, asyncState);
        }
        
        private object[] OnEndAcceptAuthorization(System.IAsyncResult result) {
            Midway.ObjectModel.ContactStatus retVal = this.EndAcceptAuthorization(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAcceptAuthorizationCompleted(object state) {
            if ((this.AcceptAuthorizationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AcceptAuthorizationCompleted(this, new AcceptAuthorizationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AcceptAuthorizationAsync(string authToken, int organizationId, int contragentId, string comment) {
            this.AcceptAuthorizationAsync(authToken, organizationId, contragentId, comment, null);
        }
        
        public void AcceptAuthorizationAsync(string authToken, int organizationId, int contragentId, string comment, object userState) {
            if ((this.onBeginAcceptAuthorizationDelegate == null)) {
                this.onBeginAcceptAuthorizationDelegate = new BeginOperationDelegate(this.OnBeginAcceptAuthorization);
            }
            if ((this.onEndAcceptAuthorizationDelegate == null)) {
                this.onEndAcceptAuthorizationDelegate = new EndOperationDelegate(this.OnEndAcceptAuthorization);
            }
            if ((this.onAcceptAuthorizationCompletedDelegate == null)) {
                this.onAcceptAuthorizationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAcceptAuthorizationCompleted);
            }
            base.InvokeAsync(this.onBeginAcceptAuthorizationDelegate, new object[] {
                        authToken,
                        organizationId,
                        contragentId,
                        comment}, this.onEndAcceptAuthorizationDelegate, this.onAcceptAuthorizationCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.ContactStatus RejectAuthorization(string authToken, int organizationId, int contragentId, string comment) {
            return base.Channel.RejectAuthorization(authToken, organizationId, contragentId, comment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRejectAuthorization(string authToken, int organizationId, int contragentId, string comment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRejectAuthorization(authToken, organizationId, contragentId, comment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.ContactStatus EndRejectAuthorization(System.IAsyncResult result) {
            return base.Channel.EndRejectAuthorization(result);
        }
        
        private System.IAsyncResult OnBeginRejectAuthorization(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            int organizationId = ((int)(inValues[1]));
            int contragentId = ((int)(inValues[2]));
            string comment = ((string)(inValues[3]));
            return this.BeginRejectAuthorization(authToken, organizationId, contragentId, comment, callback, asyncState);
        }
        
        private object[] OnEndRejectAuthorization(System.IAsyncResult result) {
            Midway.ObjectModel.ContactStatus retVal = this.EndRejectAuthorization(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRejectAuthorizationCompleted(object state) {
            if ((this.RejectAuthorizationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RejectAuthorizationCompleted(this, new RejectAuthorizationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RejectAuthorizationAsync(string authToken, int organizationId, int contragentId, string comment) {
            this.RejectAuthorizationAsync(authToken, organizationId, contragentId, comment, null);
        }
        
        public void RejectAuthorizationAsync(string authToken, int organizationId, int contragentId, string comment, object userState) {
            if ((this.onBeginRejectAuthorizationDelegate == null)) {
                this.onBeginRejectAuthorizationDelegate = new BeginOperationDelegate(this.OnBeginRejectAuthorization);
            }
            if ((this.onEndRejectAuthorizationDelegate == null)) {
                this.onEndRejectAuthorizationDelegate = new EndOperationDelegate(this.OnEndRejectAuthorization);
            }
            if ((this.onRejectAuthorizationCompletedDelegate == null)) {
                this.onRejectAuthorizationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRejectAuthorizationCompleted);
            }
            base.InvokeAsync(this.onBeginRejectAuthorizationDelegate, new object[] {
                        authToken,
                        organizationId,
                        contragentId,
                        comment}, this.onEndRejectAuthorizationDelegate, this.onRejectAuthorizationCompletedDelegate, userState);
        }
        
        public void SendAuthRequest(string authToken, int organizationId, int contragentId, string comment) {
            base.Channel.SendAuthRequest(authToken, organizationId, contragentId, comment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendAuthRequest(string authToken, int organizationId, int contragentId, string comment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendAuthRequest(authToken, organizationId, contragentId, comment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSendAuthRequest(System.IAsyncResult result) {
            base.Channel.EndSendAuthRequest(result);
        }
        
        private System.IAsyncResult OnBeginSendAuthRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            int organizationId = ((int)(inValues[1]));
            int contragentId = ((int)(inValues[2]));
            string comment = ((string)(inValues[3]));
            return this.BeginSendAuthRequest(authToken, organizationId, contragentId, comment, callback, asyncState);
        }
        
        private object[] OnEndSendAuthRequest(System.IAsyncResult result) {
            this.EndSendAuthRequest(result);
            return null;
        }
        
        private void OnSendAuthRequestCompleted(object state) {
            if ((this.SendAuthRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendAuthRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendAuthRequestAsync(string authToken, int organizationId, int contragentId, string comment) {
            this.SendAuthRequestAsync(authToken, organizationId, contragentId, comment, null);
        }
        
        public void SendAuthRequestAsync(string authToken, int organizationId, int contragentId, string comment, object userState) {
            if ((this.onBeginSendAuthRequestDelegate == null)) {
                this.onBeginSendAuthRequestDelegate = new BeginOperationDelegate(this.OnBeginSendAuthRequest);
            }
            if ((this.onEndSendAuthRequestDelegate == null)) {
                this.onEndSendAuthRequestDelegate = new EndOperationDelegate(this.OnEndSendAuthRequest);
            }
            if ((this.onSendAuthRequestCompletedDelegate == null)) {
                this.onSendAuthRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendAuthRequestCompleted);
            }
            base.InvokeAsync(this.onBeginSendAuthRequestDelegate, new object[] {
                        authToken,
                        organizationId,
                        contragentId,
                        comment}, this.onEndSendAuthRequestDelegate, this.onSendAuthRequestCompletedDelegate, userState);
        }
        
        public void CancelAuthRequest(string authToken, int organizationId, int contragentId, string comment) {
            base.Channel.CancelAuthRequest(authToken, organizationId, contragentId, comment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCancelAuthRequest(string authToken, int organizationId, int contragentId, string comment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCancelAuthRequest(authToken, organizationId, contragentId, comment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCancelAuthRequest(System.IAsyncResult result) {
            base.Channel.EndCancelAuthRequest(result);
        }
        
        private System.IAsyncResult OnBeginCancelAuthRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            int organizationId = ((int)(inValues[1]));
            int contragentId = ((int)(inValues[2]));
            string comment = ((string)(inValues[3]));
            return this.BeginCancelAuthRequest(authToken, organizationId, contragentId, comment, callback, asyncState);
        }
        
        private object[] OnEndCancelAuthRequest(System.IAsyncResult result) {
            this.EndCancelAuthRequest(result);
            return null;
        }
        
        private void OnCancelAuthRequestCompleted(object state) {
            if ((this.CancelAuthRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CancelAuthRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CancelAuthRequestAsync(string authToken, int organizationId, int contragentId, string comment) {
            this.CancelAuthRequestAsync(authToken, organizationId, contragentId, comment, null);
        }
        
        public void CancelAuthRequestAsync(string authToken, int organizationId, int contragentId, string comment, object userState) {
            if ((this.onBeginCancelAuthRequestDelegate == null)) {
                this.onBeginCancelAuthRequestDelegate = new BeginOperationDelegate(this.OnBeginCancelAuthRequest);
            }
            if ((this.onEndCancelAuthRequestDelegate == null)) {
                this.onEndCancelAuthRequestDelegate = new EndOperationDelegate(this.OnEndCancelAuthRequest);
            }
            if ((this.onCancelAuthRequestCompletedDelegate == null)) {
                this.onCancelAuthRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCancelAuthRequestCompleted);
            }
            base.InvokeAsync(this.onBeginCancelAuthRequestDelegate, new object[] {
                        authToken,
                        organizationId,
                        contragentId,
                        comment}, this.onEndCancelAuthRequestDelegate, this.onCancelAuthRequestCompletedDelegate, userState);
        }
        
        public void AcceptAuthRequest(string authToken, int organizationId, int contragentId, string comment) {
            base.Channel.AcceptAuthRequest(authToken, organizationId, contragentId, comment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAcceptAuthRequest(string authToken, int organizationId, int contragentId, string comment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAcceptAuthRequest(authToken, organizationId, contragentId, comment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAcceptAuthRequest(System.IAsyncResult result) {
            base.Channel.EndAcceptAuthRequest(result);
        }
        
        private System.IAsyncResult OnBeginAcceptAuthRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            int organizationId = ((int)(inValues[1]));
            int contragentId = ((int)(inValues[2]));
            string comment = ((string)(inValues[3]));
            return this.BeginAcceptAuthRequest(authToken, organizationId, contragentId, comment, callback, asyncState);
        }
        
        private object[] OnEndAcceptAuthRequest(System.IAsyncResult result) {
            this.EndAcceptAuthRequest(result);
            return null;
        }
        
        private void OnAcceptAuthRequestCompleted(object state) {
            if ((this.AcceptAuthRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AcceptAuthRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AcceptAuthRequestAsync(string authToken, int organizationId, int contragentId, string comment) {
            this.AcceptAuthRequestAsync(authToken, organizationId, contragentId, comment, null);
        }
        
        public void AcceptAuthRequestAsync(string authToken, int organizationId, int contragentId, string comment, object userState) {
            if ((this.onBeginAcceptAuthRequestDelegate == null)) {
                this.onBeginAcceptAuthRequestDelegate = new BeginOperationDelegate(this.OnBeginAcceptAuthRequest);
            }
            if ((this.onEndAcceptAuthRequestDelegate == null)) {
                this.onEndAcceptAuthRequestDelegate = new EndOperationDelegate(this.OnEndAcceptAuthRequest);
            }
            if ((this.onAcceptAuthRequestCompletedDelegate == null)) {
                this.onAcceptAuthRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAcceptAuthRequestCompleted);
            }
            base.InvokeAsync(this.onBeginAcceptAuthRequestDelegate, new object[] {
                        authToken,
                        organizationId,
                        contragentId,
                        comment}, this.onEndAcceptAuthRequestDelegate, this.onAcceptAuthRequestCompletedDelegate, userState);
        }
        
        public void RejectAuthRequest(string authToken, int organizationId, int contragentId, string comment) {
            base.Channel.RejectAuthRequest(authToken, organizationId, contragentId, comment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRejectAuthRequest(string authToken, int organizationId, int contragentId, string comment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRejectAuthRequest(authToken, organizationId, contragentId, comment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRejectAuthRequest(System.IAsyncResult result) {
            base.Channel.EndRejectAuthRequest(result);
        }
        
        private System.IAsyncResult OnBeginRejectAuthRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            int organizationId = ((int)(inValues[1]));
            int contragentId = ((int)(inValues[2]));
            string comment = ((string)(inValues[3]));
            return this.BeginRejectAuthRequest(authToken, organizationId, contragentId, comment, callback, asyncState);
        }
        
        private object[] OnEndRejectAuthRequest(System.IAsyncResult result) {
            this.EndRejectAuthRequest(result);
            return null;
        }
        
        private void OnRejectAuthRequestCompleted(object state) {
            if ((this.RejectAuthRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RejectAuthRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RejectAuthRequestAsync(string authToken, int organizationId, int contragentId, string comment) {
            this.RejectAuthRequestAsync(authToken, organizationId, contragentId, comment, null);
        }
        
        public void RejectAuthRequestAsync(string authToken, int organizationId, int contragentId, string comment, object userState) {
            if ((this.onBeginRejectAuthRequestDelegate == null)) {
                this.onBeginRejectAuthRequestDelegate = new BeginOperationDelegate(this.OnBeginRejectAuthRequest);
            }
            if ((this.onEndRejectAuthRequestDelegate == null)) {
                this.onEndRejectAuthRequestDelegate = new EndOperationDelegate(this.OnEndRejectAuthRequest);
            }
            if ((this.onRejectAuthRequestCompletedDelegate == null)) {
                this.onRejectAuthRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRejectAuthRequestCompleted);
            }
            base.InvokeAsync(this.onBeginRejectAuthRequestDelegate, new object[] {
                        authToken,
                        organizationId,
                        contragentId,
                        comment}, this.onEndRejectAuthRequestDelegate, this.onRejectAuthRequestCompletedDelegate, userState);
        }
        
        public void DeleteContact(string authToken, int organizationId, int contragentId, string comment) {
            base.Channel.DeleteContact(authToken, organizationId, contragentId, comment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteContact(string authToken, int organizationId, int contragentId, string comment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteContact(authToken, organizationId, contragentId, comment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteContact(System.IAsyncResult result) {
            base.Channel.EndDeleteContact(result);
        }
        
        private System.IAsyncResult OnBeginDeleteContact(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            int organizationId = ((int)(inValues[1]));
            int contragentId = ((int)(inValues[2]));
            string comment = ((string)(inValues[3]));
            return this.BeginDeleteContact(authToken, organizationId, contragentId, comment, callback, asyncState);
        }
        
        private object[] OnEndDeleteContact(System.IAsyncResult result) {
            this.EndDeleteContact(result);
            return null;
        }
        
        private void OnDeleteContactCompleted(object state) {
            if ((this.DeleteContactCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteContactCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteContactAsync(string authToken, int organizationId, int contragentId, string comment) {
            this.DeleteContactAsync(authToken, organizationId, contragentId, comment, null);
        }
        
        public void DeleteContactAsync(string authToken, int organizationId, int contragentId, string comment, object userState) {
            if ((this.onBeginDeleteContactDelegate == null)) {
                this.onBeginDeleteContactDelegate = new BeginOperationDelegate(this.OnBeginDeleteContact);
            }
            if ((this.onEndDeleteContactDelegate == null)) {
                this.onEndDeleteContactDelegate = new EndOperationDelegate(this.OnEndDeleteContact);
            }
            if ((this.onDeleteContactCompletedDelegate == null)) {
                this.onDeleteContactCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteContactCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteContactDelegate, new object[] {
                        authToken,
                        organizationId,
                        contragentId,
                        comment}, this.onEndDeleteContactDelegate, this.onDeleteContactCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.Organization GetOrganizationByInnKpp(string authToken, string inn, string kpp) {
            return base.Channel.GetOrganizationByInnKpp(authToken, inn, kpp);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetOrganizationByInnKpp(string authToken, string inn, string kpp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOrganizationByInnKpp(authToken, inn, kpp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.Organization EndGetOrganizationByInnKpp(System.IAsyncResult result) {
            return base.Channel.EndGetOrganizationByInnKpp(result);
        }
        
        private System.IAsyncResult OnBeginGetOrganizationByInnKpp(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string inn = ((string)(inValues[1]));
            string kpp = ((string)(inValues[2]));
            return this.BeginGetOrganizationByInnKpp(authToken, inn, kpp, callback, asyncState);
        }
        
        private object[] OnEndGetOrganizationByInnKpp(System.IAsyncResult result) {
            Midway.ObjectModel.Organization retVal = this.EndGetOrganizationByInnKpp(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOrganizationByInnKppCompleted(object state) {
            if ((this.GetOrganizationByInnKppCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOrganizationByInnKppCompleted(this, new GetOrganizationByInnKppCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOrganizationByInnKppAsync(string authToken, string inn, string kpp) {
            this.GetOrganizationByInnKppAsync(authToken, inn, kpp, null);
        }
        
        public void GetOrganizationByInnKppAsync(string authToken, string inn, string kpp, object userState) {
            if ((this.onBeginGetOrganizationByInnKppDelegate == null)) {
                this.onBeginGetOrganizationByInnKppDelegate = new BeginOperationDelegate(this.OnBeginGetOrganizationByInnKpp);
            }
            if ((this.onEndGetOrganizationByInnKppDelegate == null)) {
                this.onEndGetOrganizationByInnKppDelegate = new EndOperationDelegate(this.OnEndGetOrganizationByInnKpp);
            }
            if ((this.onGetOrganizationByInnKppCompletedDelegate == null)) {
                this.onGetOrganizationByInnKppCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOrganizationByInnKppCompleted);
            }
            base.InvokeAsync(this.onBeginGetOrganizationByInnKppDelegate, new object[] {
                        authToken,
                        inn,
                        kpp}, this.onEndGetOrganizationByInnKppDelegate, this.onGetOrganizationByInnKppCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.Organization GetOrganizationBy(string authToken, string boxId, Midway.ObjectModel.OrganizationByCriteria criteria, Midway.ObjectModel.OrganizationByCriteriaValues values) {
            return base.Channel.GetOrganizationBy(authToken, boxId, criteria, values);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetOrganizationBy(string authToken, string boxId, Midway.ObjectModel.OrganizationByCriteria criteria, Midway.ObjectModel.OrganizationByCriteriaValues values, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOrganizationBy(authToken, boxId, criteria, values, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.Organization EndGetOrganizationBy(System.IAsyncResult result) {
            return base.Channel.EndGetOrganizationBy(result);
        }
        
        private System.IAsyncResult OnBeginGetOrganizationBy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            Midway.ObjectModel.OrganizationByCriteria criteria = ((Midway.ObjectModel.OrganizationByCriteria)(inValues[2]));
            Midway.ObjectModel.OrganizationByCriteriaValues values = ((Midway.ObjectModel.OrganizationByCriteriaValues)(inValues[3]));
            return this.BeginGetOrganizationBy(authToken, boxId, criteria, values, callback, asyncState);
        }
        
        private object[] OnEndGetOrganizationBy(System.IAsyncResult result) {
            Midway.ObjectModel.Organization retVal = this.EndGetOrganizationBy(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOrganizationByCompleted(object state) {
            if ((this.GetOrganizationByCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOrganizationByCompleted(this, new GetOrganizationByCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOrganizationByAsync(string authToken, string boxId, Midway.ObjectModel.OrganizationByCriteria criteria, Midway.ObjectModel.OrganizationByCriteriaValues values) {
            this.GetOrganizationByAsync(authToken, boxId, criteria, values, null);
        }
        
        public void GetOrganizationByAsync(string authToken, string boxId, Midway.ObjectModel.OrganizationByCriteria criteria, Midway.ObjectModel.OrganizationByCriteriaValues values, object userState) {
            if ((this.onBeginGetOrganizationByDelegate == null)) {
                this.onBeginGetOrganizationByDelegate = new BeginOperationDelegate(this.OnBeginGetOrganizationBy);
            }
            if ((this.onEndGetOrganizationByDelegate == null)) {
                this.onEndGetOrganizationByDelegate = new EndOperationDelegate(this.OnEndGetOrganizationBy);
            }
            if ((this.onGetOrganizationByCompletedDelegate == null)) {
                this.onGetOrganizationByCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOrganizationByCompleted);
            }
            base.InvokeAsync(this.onBeginGetOrganizationByDelegate, new object[] {
                        authToken,
                        boxId,
                        criteria,
                        values}, this.onEndGetOrganizationByDelegate, this.onGetOrganizationByCompletedDelegate, userState);
        }
        
        public string GetErrorText(Midway.ObjectModel.Exceptions.ServiceErrorCode code) {
            return base.Channel.GetErrorText(code);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetErrorText(Midway.ObjectModel.Exceptions.ServiceErrorCode code, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetErrorText(code, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetErrorText(System.IAsyncResult result) {
            return base.Channel.EndGetErrorText(result);
        }
        
        private System.IAsyncResult OnBeginGetErrorText(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Midway.ObjectModel.Exceptions.ServiceErrorCode code = ((Midway.ObjectModel.Exceptions.ServiceErrorCode)(inValues[0]));
            return this.BeginGetErrorText(code, callback, asyncState);
        }
        
        private object[] OnEndGetErrorText(System.IAsyncResult result) {
            string retVal = this.EndGetErrorText(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetErrorTextCompleted(object state) {
            if ((this.GetErrorTextCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetErrorTextCompleted(this, new GetErrorTextCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetErrorTextAsync(Midway.ObjectModel.Exceptions.ServiceErrorCode code) {
            this.GetErrorTextAsync(code, null);
        }
        
        public void GetErrorTextAsync(Midway.ObjectModel.Exceptions.ServiceErrorCode code, object userState) {
            if ((this.onBeginGetErrorTextDelegate == null)) {
                this.onBeginGetErrorTextDelegate = new BeginOperationDelegate(this.OnBeginGetErrorText);
            }
            if ((this.onEndGetErrorTextDelegate == null)) {
                this.onEndGetErrorTextDelegate = new EndOperationDelegate(this.OnEndGetErrorText);
            }
            if ((this.onGetErrorTextCompletedDelegate == null)) {
                this.onGetErrorTextCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetErrorTextCompleted);
            }
            base.InvokeAsync(this.onBeginGetErrorTextDelegate, new object[] {
                        code}, this.onEndGetErrorTextDelegate, this.onGetErrorTextCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.BoxInfo[] GetBoxes(string authToken) {
            return base.Channel.GetBoxes(authToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetBoxes(string authToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBoxes(authToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.BoxInfo[] EndGetBoxes(System.IAsyncResult result) {
            return base.Channel.EndGetBoxes(result);
        }
        
        private System.IAsyncResult OnBeginGetBoxes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            return this.BeginGetBoxes(authToken, callback, asyncState);
        }
        
        private object[] OnEndGetBoxes(System.IAsyncResult result) {
            Midway.ObjectModel.BoxInfo[] retVal = this.EndGetBoxes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetBoxesCompleted(object state) {
            if ((this.GetBoxesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBoxesCompleted(this, new GetBoxesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBoxesAsync(string authToken) {
            this.GetBoxesAsync(authToken, null);
        }
        
        public void GetBoxesAsync(string authToken, object userState) {
            if ((this.onBeginGetBoxesDelegate == null)) {
                this.onBeginGetBoxesDelegate = new BeginOperationDelegate(this.OnBeginGetBoxes);
            }
            if ((this.onEndGetBoxesDelegate == null)) {
                this.onEndGetBoxesDelegate = new EndOperationDelegate(this.OnEndGetBoxes);
            }
            if ((this.onGetBoxesCompletedDelegate == null)) {
                this.onGetBoxesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBoxesCompleted);
            }
            base.InvokeAsync(this.onBeginGetBoxesDelegate, new object[] {
                        authToken}, this.onEndGetBoxesDelegate, this.onGetBoxesCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.SubjectInfo GetSubjectInfo(string authToken, string subjectBoxId) {
            return base.Channel.GetSubjectInfo(authToken, subjectBoxId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSubjectInfo(string authToken, string subjectBoxId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSubjectInfo(authToken, subjectBoxId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.SubjectInfo EndGetSubjectInfo(System.IAsyncResult result) {
            return base.Channel.EndGetSubjectInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetSubjectInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string subjectBoxId = ((string)(inValues[1]));
            return this.BeginGetSubjectInfo(authToken, subjectBoxId, callback, asyncState);
        }
        
        private object[] OnEndGetSubjectInfo(System.IAsyncResult result) {
            Midway.ObjectModel.SubjectInfo retVal = this.EndGetSubjectInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSubjectInfoCompleted(object state) {
            if ((this.GetSubjectInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSubjectInfoCompleted(this, new GetSubjectInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSubjectInfoAsync(string authToken, string subjectBoxId) {
            this.GetSubjectInfoAsync(authToken, subjectBoxId, null);
        }
        
        public void GetSubjectInfoAsync(string authToken, string subjectBoxId, object userState) {
            if ((this.onBeginGetSubjectInfoDelegate == null)) {
                this.onBeginGetSubjectInfoDelegate = new BeginOperationDelegate(this.OnBeginGetSubjectInfo);
            }
            if ((this.onEndGetSubjectInfoDelegate == null)) {
                this.onEndGetSubjectInfoDelegate = new EndOperationDelegate(this.OnEndGetSubjectInfo);
            }
            if ((this.onGetSubjectInfoCompletedDelegate == null)) {
                this.onGetSubjectInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSubjectInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetSubjectInfoDelegate, new object[] {
                        authToken,
                        subjectBoxId}, this.onEndGetSubjectInfoDelegate, this.onGetSubjectInfoCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.SubjectInfo GetSpecialOperatorInfo(string authToken) {
            return base.Channel.GetSpecialOperatorInfo(authToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSpecialOperatorInfo(string authToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSpecialOperatorInfo(authToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.SubjectInfo EndGetSpecialOperatorInfo(System.IAsyncResult result) {
            return base.Channel.EndGetSpecialOperatorInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetSpecialOperatorInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            return this.BeginGetSpecialOperatorInfo(authToken, callback, asyncState);
        }
        
        private object[] OnEndGetSpecialOperatorInfo(System.IAsyncResult result) {
            Midway.ObjectModel.SubjectInfo retVal = this.EndGetSpecialOperatorInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSpecialOperatorInfoCompleted(object state) {
            if ((this.GetSpecialOperatorInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSpecialOperatorInfoCompleted(this, new GetSpecialOperatorInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSpecialOperatorInfoAsync(string authToken) {
            this.GetSpecialOperatorInfoAsync(authToken, null);
        }
        
        public void GetSpecialOperatorInfoAsync(string authToken, object userState) {
            if ((this.onBeginGetSpecialOperatorInfoDelegate == null)) {
                this.onBeginGetSpecialOperatorInfoDelegate = new BeginOperationDelegate(this.OnBeginGetSpecialOperatorInfo);
            }
            if ((this.onEndGetSpecialOperatorInfoDelegate == null)) {
                this.onEndGetSpecialOperatorInfoDelegate = new EndOperationDelegate(this.OnEndGetSpecialOperatorInfo);
            }
            if ((this.onGetSpecialOperatorInfoCompletedDelegate == null)) {
                this.onGetSpecialOperatorInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSpecialOperatorInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetSpecialOperatorInfoDelegate, new object[] {
                        authToken}, this.onEndGetSpecialOperatorInfoDelegate, this.onGetSpecialOperatorInfoCompletedDelegate, userState);
        }
        
        public string AddOrganizationStructureElement(string authToken, Midway.ObjectModel.OrganizationStructureElement element) {
            return base.Channel.AddOrganizationStructureElement(authToken, element);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddOrganizationStructureElement(string authToken, Midway.ObjectModel.OrganizationStructureElement element, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddOrganizationStructureElement(authToken, element, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndAddOrganizationStructureElement(System.IAsyncResult result) {
            return base.Channel.EndAddOrganizationStructureElement(result);
        }
        
        private System.IAsyncResult OnBeginAddOrganizationStructureElement(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            Midway.ObjectModel.OrganizationStructureElement element = ((Midway.ObjectModel.OrganizationStructureElement)(inValues[1]));
            return this.BeginAddOrganizationStructureElement(authToken, element, callback, asyncState);
        }
        
        private object[] OnEndAddOrganizationStructureElement(System.IAsyncResult result) {
            string retVal = this.EndAddOrganizationStructureElement(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddOrganizationStructureElementCompleted(object state) {
            if ((this.AddOrganizationStructureElementCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddOrganizationStructureElementCompleted(this, new AddOrganizationStructureElementCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddOrganizationStructureElementAsync(string authToken, Midway.ObjectModel.OrganizationStructureElement element) {
            this.AddOrganizationStructureElementAsync(authToken, element, null);
        }
        
        public void AddOrganizationStructureElementAsync(string authToken, Midway.ObjectModel.OrganizationStructureElement element, object userState) {
            if ((this.onBeginAddOrganizationStructureElementDelegate == null)) {
                this.onBeginAddOrganizationStructureElementDelegate = new BeginOperationDelegate(this.OnBeginAddOrganizationStructureElement);
            }
            if ((this.onEndAddOrganizationStructureElementDelegate == null)) {
                this.onEndAddOrganizationStructureElementDelegate = new EndOperationDelegate(this.OnEndAddOrganizationStructureElement);
            }
            if ((this.onAddOrganizationStructureElementCompletedDelegate == null)) {
                this.onAddOrganizationStructureElementCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddOrganizationStructureElementCompleted);
            }
            base.InvokeAsync(this.onBeginAddOrganizationStructureElementDelegate, new object[] {
                        authToken,
                        element}, this.onEndAddOrganizationStructureElementDelegate, this.onAddOrganizationStructureElementCompletedDelegate, userState);
        }
        
        public void DeleteOrganizationStructureElement(string authToken, string organizationId, string elementId) {
            base.Channel.DeleteOrganizationStructureElement(authToken, organizationId, elementId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteOrganizationStructureElement(string authToken, string organizationId, string elementId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteOrganizationStructureElement(authToken, organizationId, elementId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteOrganizationStructureElement(System.IAsyncResult result) {
            base.Channel.EndDeleteOrganizationStructureElement(result);
        }
        
        private System.IAsyncResult OnBeginDeleteOrganizationStructureElement(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string organizationId = ((string)(inValues[1]));
            string elementId = ((string)(inValues[2]));
            return this.BeginDeleteOrganizationStructureElement(authToken, organizationId, elementId, callback, asyncState);
        }
        
        private object[] OnEndDeleteOrganizationStructureElement(System.IAsyncResult result) {
            this.EndDeleteOrganizationStructureElement(result);
            return null;
        }
        
        private void OnDeleteOrganizationStructureElementCompleted(object state) {
            if ((this.DeleteOrganizationStructureElementCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteOrganizationStructureElementCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteOrganizationStructureElementAsync(string authToken, string organizationId, string elementId) {
            this.DeleteOrganizationStructureElementAsync(authToken, organizationId, elementId, null);
        }
        
        public void DeleteOrganizationStructureElementAsync(string authToken, string organizationId, string elementId, object userState) {
            if ((this.onBeginDeleteOrganizationStructureElementDelegate == null)) {
                this.onBeginDeleteOrganizationStructureElementDelegate = new BeginOperationDelegate(this.OnBeginDeleteOrganizationStructureElement);
            }
            if ((this.onEndDeleteOrganizationStructureElementDelegate == null)) {
                this.onEndDeleteOrganizationStructureElementDelegate = new EndOperationDelegate(this.OnEndDeleteOrganizationStructureElement);
            }
            if ((this.onDeleteOrganizationStructureElementCompletedDelegate == null)) {
                this.onDeleteOrganizationStructureElementCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteOrganizationStructureElementCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteOrganizationStructureElementDelegate, new object[] {
                        authToken,
                        organizationId,
                        elementId}, this.onEndDeleteOrganizationStructureElementDelegate, this.onDeleteOrganizationStructureElementCompletedDelegate, userState);
        }
        
        public void ModifyOrganizationStructureElement(string authToken, Midway.ObjectModel.OrganizationStructureElement element) {
            base.Channel.ModifyOrganizationStructureElement(authToken, element);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginModifyOrganizationStructureElement(string authToken, Midway.ObjectModel.OrganizationStructureElement element, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginModifyOrganizationStructureElement(authToken, element, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndModifyOrganizationStructureElement(System.IAsyncResult result) {
            base.Channel.EndModifyOrganizationStructureElement(result);
        }
        
        private System.IAsyncResult OnBeginModifyOrganizationStructureElement(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            Midway.ObjectModel.OrganizationStructureElement element = ((Midway.ObjectModel.OrganizationStructureElement)(inValues[1]));
            return this.BeginModifyOrganizationStructureElement(authToken, element, callback, asyncState);
        }
        
        private object[] OnEndModifyOrganizationStructureElement(System.IAsyncResult result) {
            this.EndModifyOrganizationStructureElement(result);
            return null;
        }
        
        private void OnModifyOrganizationStructureElementCompleted(object state) {
            if ((this.ModifyOrganizationStructureElementCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ModifyOrganizationStructureElementCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ModifyOrganizationStructureElementAsync(string authToken, Midway.ObjectModel.OrganizationStructureElement element) {
            this.ModifyOrganizationStructureElementAsync(authToken, element, null);
        }
        
        public void ModifyOrganizationStructureElementAsync(string authToken, Midway.ObjectModel.OrganizationStructureElement element, object userState) {
            if ((this.onBeginModifyOrganizationStructureElementDelegate == null)) {
                this.onBeginModifyOrganizationStructureElementDelegate = new BeginOperationDelegate(this.OnBeginModifyOrganizationStructureElement);
            }
            if ((this.onEndModifyOrganizationStructureElementDelegate == null)) {
                this.onEndModifyOrganizationStructureElementDelegate = new EndOperationDelegate(this.OnEndModifyOrganizationStructureElement);
            }
            if ((this.onModifyOrganizationStructureElementCompletedDelegate == null)) {
                this.onModifyOrganizationStructureElementCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnModifyOrganizationStructureElementCompleted);
            }
            base.InvokeAsync(this.onBeginModifyOrganizationStructureElementDelegate, new object[] {
                        authToken,
                        element}, this.onEndModifyOrganizationStructureElementDelegate, this.onModifyOrganizationStructureElementCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.OrganizationStructureElement[] GetOrganizationStructure(string authToken, string boxId, string organizationId) {
            return base.Channel.GetOrganizationStructure(authToken, boxId, organizationId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetOrganizationStructure(string authToken, string boxId, string organizationId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOrganizationStructure(authToken, boxId, organizationId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.OrganizationStructureElement[] EndGetOrganizationStructure(System.IAsyncResult result) {
            return base.Channel.EndGetOrganizationStructure(result);
        }
        
        private System.IAsyncResult OnBeginGetOrganizationStructure(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            string organizationId = ((string)(inValues[2]));
            return this.BeginGetOrganizationStructure(authToken, boxId, organizationId, callback, asyncState);
        }
        
        private object[] OnEndGetOrganizationStructure(System.IAsyncResult result) {
            Midway.ObjectModel.OrganizationStructureElement[] retVal = this.EndGetOrganizationStructure(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOrganizationStructureCompleted(object state) {
            if ((this.GetOrganizationStructureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOrganizationStructureCompleted(this, new GetOrganizationStructureCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOrganizationStructureAsync(string authToken, string boxId, string organizationId) {
            this.GetOrganizationStructureAsync(authToken, boxId, organizationId, null);
        }
        
        public void GetOrganizationStructureAsync(string authToken, string boxId, string organizationId, object userState) {
            if ((this.onBeginGetOrganizationStructureDelegate == null)) {
                this.onBeginGetOrganizationStructureDelegate = new BeginOperationDelegate(this.OnBeginGetOrganizationStructure);
            }
            if ((this.onEndGetOrganizationStructureDelegate == null)) {
                this.onEndGetOrganizationStructureDelegate = new EndOperationDelegate(this.OnEndGetOrganizationStructure);
            }
            if ((this.onGetOrganizationStructureCompletedDelegate == null)) {
                this.onGetOrganizationStructureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOrganizationStructureCompleted);
            }
            base.InvokeAsync(this.onBeginGetOrganizationStructureDelegate, new object[] {
                        authToken,
                        boxId,
                        organizationId}, this.onEndGetOrganizationStructureDelegate, this.onGetOrganizationStructureCompletedDelegate, userState);
        }
        
        public bool OrganizationStructureHasSingleElement(string authToken, string organizationId) {
            return base.Channel.OrganizationStructureHasSingleElement(authToken, organizationId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginOrganizationStructureHasSingleElement(string authToken, string organizationId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOrganizationStructureHasSingleElement(authToken, organizationId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndOrganizationStructureHasSingleElement(System.IAsyncResult result) {
            return base.Channel.EndOrganizationStructureHasSingleElement(result);
        }
        
        private System.IAsyncResult OnBeginOrganizationStructureHasSingleElement(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string organizationId = ((string)(inValues[1]));
            return this.BeginOrganizationStructureHasSingleElement(authToken, organizationId, callback, asyncState);
        }
        
        private object[] OnEndOrganizationStructureHasSingleElement(System.IAsyncResult result) {
            bool retVal = this.EndOrganizationStructureHasSingleElement(result);
            return new object[] {
                    retVal};
        }
        
        private void OnOrganizationStructureHasSingleElementCompleted(object state) {
            if ((this.OrganizationStructureHasSingleElementCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OrganizationStructureHasSingleElementCompleted(this, new OrganizationStructureHasSingleElementCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OrganizationStructureHasSingleElementAsync(string authToken, string organizationId) {
            this.OrganizationStructureHasSingleElementAsync(authToken, organizationId, null);
        }
        
        public void OrganizationStructureHasSingleElementAsync(string authToken, string organizationId, object userState) {
            if ((this.onBeginOrganizationStructureHasSingleElementDelegate == null)) {
                this.onBeginOrganizationStructureHasSingleElementDelegate = new BeginOperationDelegate(this.OnBeginOrganizationStructureHasSingleElement);
            }
            if ((this.onEndOrganizationStructureHasSingleElementDelegate == null)) {
                this.onEndOrganizationStructureHasSingleElementDelegate = new EndOperationDelegate(this.OnEndOrganizationStructureHasSingleElement);
            }
            if ((this.onOrganizationStructureHasSingleElementCompletedDelegate == null)) {
                this.onOrganizationStructureHasSingleElementCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOrganizationStructureHasSingleElementCompleted);
            }
            base.InvokeAsync(this.onBeginOrganizationStructureHasSingleElementDelegate, new object[] {
                        authToken,
                        organizationId}, this.onEndOrganizationStructureHasSingleElementDelegate, this.onOrganizationStructureHasSingleElementCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.OrganizationStructureElement[] GetOrganizationStructureElementChildren(string authToken, string organizationId, string orgStructureElementId) {
            return base.Channel.GetOrganizationStructureElementChildren(authToken, organizationId, orgStructureElementId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetOrganizationStructureElementChildren(string authToken, string organizationId, string orgStructureElementId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOrganizationStructureElementChildren(authToken, organizationId, orgStructureElementId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.OrganizationStructureElement[] EndGetOrganizationStructureElementChildren(System.IAsyncResult result) {
            return base.Channel.EndGetOrganizationStructureElementChildren(result);
        }
        
        private System.IAsyncResult OnBeginGetOrganizationStructureElementChildren(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string organizationId = ((string)(inValues[1]));
            string orgStructureElementId = ((string)(inValues[2]));
            return this.BeginGetOrganizationStructureElementChildren(authToken, organizationId, orgStructureElementId, callback, asyncState);
        }
        
        private object[] OnEndGetOrganizationStructureElementChildren(System.IAsyncResult result) {
            Midway.ObjectModel.OrganizationStructureElement[] retVal = this.EndGetOrganizationStructureElementChildren(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOrganizationStructureElementChildrenCompleted(object state) {
            if ((this.GetOrganizationStructureElementChildrenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOrganizationStructureElementChildrenCompleted(this, new GetOrganizationStructureElementChildrenCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOrganizationStructureElementChildrenAsync(string authToken, string organizationId, string orgStructureElementId) {
            this.GetOrganizationStructureElementChildrenAsync(authToken, organizationId, orgStructureElementId, null);
        }
        
        public void GetOrganizationStructureElementChildrenAsync(string authToken, string organizationId, string orgStructureElementId, object userState) {
            if ((this.onBeginGetOrganizationStructureElementChildrenDelegate == null)) {
                this.onBeginGetOrganizationStructureElementChildrenDelegate = new BeginOperationDelegate(this.OnBeginGetOrganizationStructureElementChildren);
            }
            if ((this.onEndGetOrganizationStructureElementChildrenDelegate == null)) {
                this.onEndGetOrganizationStructureElementChildrenDelegate = new EndOperationDelegate(this.OnEndGetOrganizationStructureElementChildren);
            }
            if ((this.onGetOrganizationStructureElementChildrenCompletedDelegate == null)) {
                this.onGetOrganizationStructureElementChildrenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOrganizationStructureElementChildrenCompleted);
            }
            base.InvokeAsync(this.onBeginGetOrganizationStructureElementChildrenDelegate, new object[] {
                        authToken,
                        organizationId,
                        orgStructureElementId}, this.onEndGetOrganizationStructureElementChildrenDelegate, this.onGetOrganizationStructureElementChildrenCompletedDelegate, userState);
        }
        
        public string GetVersion() {
            return base.Channel.GetVersion();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetVersion(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVersion(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetVersion(System.IAsyncResult result) {
            return base.Channel.EndGetVersion(result);
        }
        
        private System.IAsyncResult OnBeginGetVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetVersion(callback, asyncState);
        }
        
        private object[] OnEndGetVersion(System.IAsyncResult result) {
            string retVal = this.EndGetVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVersionCompleted(object state) {
            if ((this.GetVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVersionCompleted(this, new GetVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVersionAsync() {
            this.GetVersionAsync(null);
        }
        
        public void GetVersionAsync(object userState) {
            if ((this.onBeginGetVersionDelegate == null)) {
                this.onBeginGetVersionDelegate = new BeginOperationDelegate(this.OnBeginGetVersion);
            }
            if ((this.onEndGetVersionDelegate == null)) {
                this.onEndGetVersionDelegate = new EndOperationDelegate(this.OnEndGetVersion);
            }
            if ((this.onGetVersionCompletedDelegate == null)) {
                this.onGetVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVersionCompleted);
            }
            base.InvokeAsync(this.onBeginGetVersionDelegate, null, this.onEndGetVersionDelegate, this.onGetVersionCompletedDelegate, userState);
        }
        
        public bool CanSendInvoice(string authToken, string certHash) {
            return base.Channel.CanSendInvoice(authToken, certHash);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCanSendInvoice(string authToken, string certHash, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCanSendInvoice(authToken, certHash, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndCanSendInvoice(System.IAsyncResult result) {
            return base.Channel.EndCanSendInvoice(result);
        }
        
        private System.IAsyncResult OnBeginCanSendInvoice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string certHash = ((string)(inValues[1]));
            return this.BeginCanSendInvoice(authToken, certHash, callback, asyncState);
        }
        
        private object[] OnEndCanSendInvoice(System.IAsyncResult result) {
            bool retVal = this.EndCanSendInvoice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCanSendInvoiceCompleted(object state) {
            if ((this.CanSendInvoiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CanSendInvoiceCompleted(this, new CanSendInvoiceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CanSendInvoiceAsync(string authToken, string certHash) {
            this.CanSendInvoiceAsync(authToken, certHash, null);
        }
        
        public void CanSendInvoiceAsync(string authToken, string certHash, object userState) {
            if ((this.onBeginCanSendInvoiceDelegate == null)) {
                this.onBeginCanSendInvoiceDelegate = new BeginOperationDelegate(this.OnBeginCanSendInvoice);
            }
            if ((this.onEndCanSendInvoiceDelegate == null)) {
                this.onEndCanSendInvoiceDelegate = new EndOperationDelegate(this.OnEndCanSendInvoice);
            }
            if ((this.onCanSendInvoiceCompletedDelegate == null)) {
                this.onCanSendInvoiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCanSendInvoiceCompleted);
            }
            base.InvokeAsync(this.onBeginCanSendInvoiceDelegate, new object[] {
                        authToken,
                        certHash}, this.onEndCanSendInvoiceDelegate, this.onCanSendInvoiceCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.CertificateValidationResult CheckQualifiedCertificate(byte[] certificate) {
            return base.Channel.CheckQualifiedCertificate(certificate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckQualifiedCertificate(byte[] certificate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckQualifiedCertificate(certificate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.CertificateValidationResult EndCheckQualifiedCertificate(System.IAsyncResult result) {
            return base.Channel.EndCheckQualifiedCertificate(result);
        }
        
        private System.IAsyncResult OnBeginCheckQualifiedCertificate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] certificate = ((byte[])(inValues[0]));
            return this.BeginCheckQualifiedCertificate(certificate, callback, asyncState);
        }
        
        private object[] OnEndCheckQualifiedCertificate(System.IAsyncResult result) {
            Midway.ObjectModel.CertificateValidationResult retVal = this.EndCheckQualifiedCertificate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckQualifiedCertificateCompleted(object state) {
            if ((this.CheckQualifiedCertificateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckQualifiedCertificateCompleted(this, new CheckQualifiedCertificateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckQualifiedCertificateAsync(byte[] certificate) {
            this.CheckQualifiedCertificateAsync(certificate, null);
        }
        
        public void CheckQualifiedCertificateAsync(byte[] certificate, object userState) {
            if ((this.onBeginCheckQualifiedCertificateDelegate == null)) {
                this.onBeginCheckQualifiedCertificateDelegate = new BeginOperationDelegate(this.OnBeginCheckQualifiedCertificate);
            }
            if ((this.onEndCheckQualifiedCertificateDelegate == null)) {
                this.onEndCheckQualifiedCertificateDelegate = new EndOperationDelegate(this.OnEndCheckQualifiedCertificate);
            }
            if ((this.onCheckQualifiedCertificateCompletedDelegate == null)) {
                this.onCheckQualifiedCertificateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckQualifiedCertificateCompleted);
            }
            base.InvokeAsync(this.onBeginCheckQualifiedCertificateDelegate, new object[] {
                        certificate}, this.onEndCheckQualifiedCertificateDelegate, this.onCheckQualifiedCertificateCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.BoxCertificate[] GetBoxCertificates(string authToken) {
            return base.Channel.GetBoxCertificates(authToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetBoxCertificates(string authToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBoxCertificates(authToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.BoxCertificate[] EndGetBoxCertificates(System.IAsyncResult result) {
            return base.Channel.EndGetBoxCertificates(result);
        }
        
        private System.IAsyncResult OnBeginGetBoxCertificates(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            return this.BeginGetBoxCertificates(authToken, callback, asyncState);
        }
        
        private object[] OnEndGetBoxCertificates(System.IAsyncResult result) {
            Midway.ObjectModel.BoxCertificate[] retVal = this.EndGetBoxCertificates(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetBoxCertificatesCompleted(object state) {
            if ((this.GetBoxCertificatesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBoxCertificatesCompleted(this, new GetBoxCertificatesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBoxCertificatesAsync(string authToken) {
            this.GetBoxCertificatesAsync(authToken, null);
        }
        
        public void GetBoxCertificatesAsync(string authToken, object userState) {
            if ((this.onBeginGetBoxCertificatesDelegate == null)) {
                this.onBeginGetBoxCertificatesDelegate = new BeginOperationDelegate(this.OnBeginGetBoxCertificates);
            }
            if ((this.onEndGetBoxCertificatesDelegate == null)) {
                this.onEndGetBoxCertificatesDelegate = new EndOperationDelegate(this.OnEndGetBoxCertificates);
            }
            if ((this.onGetBoxCertificatesCompletedDelegate == null)) {
                this.onGetBoxCertificatesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBoxCertificatesCompleted);
            }
            base.InvokeAsync(this.onBeginGetBoxCertificatesDelegate, new object[] {
                        authToken}, this.onEndGetBoxCertificatesDelegate, this.onGetBoxCertificatesCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.ServiceNotice[] GetRequiredNotices(string authToken, string boxId, string certThumbprint) {
            return base.Channel.GetRequiredNotices(authToken, boxId, certThumbprint);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRequiredNotices(string authToken, string boxId, string certThumbprint, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRequiredNotices(authToken, boxId, certThumbprint, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.ServiceNotice[] EndGetRequiredNotices(System.IAsyncResult result) {
            return base.Channel.EndGetRequiredNotices(result);
        }
        
        private System.IAsyncResult OnBeginGetRequiredNotices(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            string certThumbprint = ((string)(inValues[2]));
            return this.BeginGetRequiredNotices(authToken, boxId, certThumbprint, callback, asyncState);
        }
        
        private object[] OnEndGetRequiredNotices(System.IAsyncResult result) {
            Midway.ObjectModel.ServiceNotice[] retVal = this.EndGetRequiredNotices(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRequiredNoticesCompleted(object state) {
            if ((this.GetRequiredNoticesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRequiredNoticesCompleted(this, new GetRequiredNoticesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRequiredNoticesAsync(string authToken, string boxId, string certThumbprint) {
            this.GetRequiredNoticesAsync(authToken, boxId, certThumbprint, null);
        }
        
        public void GetRequiredNoticesAsync(string authToken, string boxId, string certThumbprint, object userState) {
            if ((this.onBeginGetRequiredNoticesDelegate == null)) {
                this.onBeginGetRequiredNoticesDelegate = new BeginOperationDelegate(this.OnBeginGetRequiredNotices);
            }
            if ((this.onEndGetRequiredNoticesDelegate == null)) {
                this.onEndGetRequiredNoticesDelegate = new EndOperationDelegate(this.OnEndGetRequiredNotices);
            }
            if ((this.onGetRequiredNoticesCompletedDelegate == null)) {
                this.onGetRequiredNoticesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRequiredNoticesCompleted);
            }
            base.InvokeAsync(this.onBeginGetRequiredNoticesDelegate, new object[] {
                        authToken,
                        boxId,
                        certThumbprint}, this.onEndGetRequiredNoticesDelegate, this.onGetRequiredNoticesCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.EnhancedSign GetEnhancedSign(string authToken, string boxId, byte[] sign) {
            return base.Channel.GetEnhancedSign(authToken, boxId, sign);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetEnhancedSign(string authToken, string boxId, byte[] sign, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEnhancedSign(authToken, boxId, sign, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.EnhancedSign EndGetEnhancedSign(System.IAsyncResult result) {
            return base.Channel.EndGetEnhancedSign(result);
        }
        
        private System.IAsyncResult OnBeginGetEnhancedSign(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            byte[] sign = ((byte[])(inValues[2]));
            return this.BeginGetEnhancedSign(authToken, boxId, sign, callback, asyncState);
        }
        
        private object[] OnEndGetEnhancedSign(System.IAsyncResult result) {
            Midway.ObjectModel.EnhancedSign retVal = this.EndGetEnhancedSign(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEnhancedSignCompleted(object state) {
            if ((this.GetEnhancedSignCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEnhancedSignCompleted(this, new GetEnhancedSignCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEnhancedSignAsync(string authToken, string boxId, byte[] sign) {
            this.GetEnhancedSignAsync(authToken, boxId, sign, null);
        }
        
        public void GetEnhancedSignAsync(string authToken, string boxId, byte[] sign, object userState) {
            if ((this.onBeginGetEnhancedSignDelegate == null)) {
                this.onBeginGetEnhancedSignDelegate = new BeginOperationDelegate(this.OnBeginGetEnhancedSign);
            }
            if ((this.onEndGetEnhancedSignDelegate == null)) {
                this.onEndGetEnhancedSignDelegate = new EndOperationDelegate(this.OnEndGetEnhancedSign);
            }
            if ((this.onGetEnhancedSignCompletedDelegate == null)) {
                this.onGetEnhancedSignCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEnhancedSignCompleted);
            }
            base.InvokeAsync(this.onBeginGetEnhancedSignDelegate, new object[] {
                        authToken,
                        boxId,
                        sign}, this.onEndGetEnhancedSignDelegate, this.onGetEnhancedSignCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.EnhancedSign GetEnhancedSignById(string authToken, string boxId, string signId) {
            return base.Channel.GetEnhancedSignById(authToken, boxId, signId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetEnhancedSignById(string authToken, string boxId, string signId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEnhancedSignById(authToken, boxId, signId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.EnhancedSign EndGetEnhancedSignById(System.IAsyncResult result) {
            return base.Channel.EndGetEnhancedSignById(result);
        }
        
        private System.IAsyncResult OnBeginGetEnhancedSignById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            string signId = ((string)(inValues[2]));
            return this.BeginGetEnhancedSignById(authToken, boxId, signId, callback, asyncState);
        }
        
        private object[] OnEndGetEnhancedSignById(System.IAsyncResult result) {
            Midway.ObjectModel.EnhancedSign retVal = this.EndGetEnhancedSignById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEnhancedSignByIdCompleted(object state) {
            if ((this.GetEnhancedSignByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEnhancedSignByIdCompleted(this, new GetEnhancedSignByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEnhancedSignByIdAsync(string authToken, string boxId, string signId) {
            this.GetEnhancedSignByIdAsync(authToken, boxId, signId, null);
        }
        
        public void GetEnhancedSignByIdAsync(string authToken, string boxId, string signId, object userState) {
            if ((this.onBeginGetEnhancedSignByIdDelegate == null)) {
                this.onBeginGetEnhancedSignByIdDelegate = new BeginOperationDelegate(this.OnBeginGetEnhancedSignById);
            }
            if ((this.onEndGetEnhancedSignByIdDelegate == null)) {
                this.onEndGetEnhancedSignByIdDelegate = new EndOperationDelegate(this.OnEndGetEnhancedSignById);
            }
            if ((this.onGetEnhancedSignByIdCompletedDelegate == null)) {
                this.onGetEnhancedSignByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEnhancedSignByIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetEnhancedSignByIdDelegate, new object[] {
                        authToken,
                        boxId,
                        signId}, this.onEndGetEnhancedSignByIdDelegate, this.onGetEnhancedSignByIdCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.NamedContent DownloadDocumentFlowArchive(string authToken, string boxId, string documentId) {
            return base.Channel.DownloadDocumentFlowArchive(authToken, boxId, documentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDownloadDocumentFlowArchive(string authToken, string boxId, string documentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDownloadDocumentFlowArchive(authToken, boxId, documentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.NamedContent EndDownloadDocumentFlowArchive(System.IAsyncResult result) {
            return base.Channel.EndDownloadDocumentFlowArchive(result);
        }
        
        private System.IAsyncResult OnBeginDownloadDocumentFlowArchive(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            string documentId = ((string)(inValues[2]));
            return this.BeginDownloadDocumentFlowArchive(authToken, boxId, documentId, callback, asyncState);
        }
        
        private object[] OnEndDownloadDocumentFlowArchive(System.IAsyncResult result) {
            Midway.ObjectModel.NamedContent retVal = this.EndDownloadDocumentFlowArchive(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDownloadDocumentFlowArchiveCompleted(object state) {
            if ((this.DownloadDocumentFlowArchiveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DownloadDocumentFlowArchiveCompleted(this, new DownloadDocumentFlowArchiveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DownloadDocumentFlowArchiveAsync(string authToken, string boxId, string documentId) {
            this.DownloadDocumentFlowArchiveAsync(authToken, boxId, documentId, null);
        }
        
        public void DownloadDocumentFlowArchiveAsync(string authToken, string boxId, string documentId, object userState) {
            if ((this.onBeginDownloadDocumentFlowArchiveDelegate == null)) {
                this.onBeginDownloadDocumentFlowArchiveDelegate = new BeginOperationDelegate(this.OnBeginDownloadDocumentFlowArchive);
            }
            if ((this.onEndDownloadDocumentFlowArchiveDelegate == null)) {
                this.onEndDownloadDocumentFlowArchiveDelegate = new EndOperationDelegate(this.OnEndDownloadDocumentFlowArchive);
            }
            if ((this.onDownloadDocumentFlowArchiveCompletedDelegate == null)) {
                this.onDownloadDocumentFlowArchiveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownloadDocumentFlowArchiveCompleted);
            }
            base.InvokeAsync(this.onBeginDownloadDocumentFlowArchiveDelegate, new object[] {
                        authToken,
                        boxId,
                        documentId}, this.onEndDownloadDocumentFlowArchiveDelegate, this.onDownloadDocumentFlowArchiveCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.Organization[] GetOrganizationListByInnKpp(string authToken, string inn, string kpp) {
            return base.Channel.GetOrganizationListByInnKpp(authToken, inn, kpp);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetOrganizationListByInnKpp(string authToken, string inn, string kpp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOrganizationListByInnKpp(authToken, inn, kpp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.Organization[] EndGetOrganizationListByInnKpp(System.IAsyncResult result) {
            return base.Channel.EndGetOrganizationListByInnKpp(result);
        }
        
        private System.IAsyncResult OnBeginGetOrganizationListByInnKpp(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string inn = ((string)(inValues[1]));
            string kpp = ((string)(inValues[2]));
            return this.BeginGetOrganizationListByInnKpp(authToken, inn, kpp, callback, asyncState);
        }
        
        private object[] OnEndGetOrganizationListByInnKpp(System.IAsyncResult result) {
            Midway.ObjectModel.Organization[] retVal = this.EndGetOrganizationListByInnKpp(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOrganizationListByInnKppCompleted(object state) {
            if ((this.GetOrganizationListByInnKppCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOrganizationListByInnKppCompleted(this, new GetOrganizationListByInnKppCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOrganizationListByInnKppAsync(string authToken, string inn, string kpp) {
            this.GetOrganizationListByInnKppAsync(authToken, inn, kpp, null);
        }
        
        public void GetOrganizationListByInnKppAsync(string authToken, string inn, string kpp, object userState) {
            if ((this.onBeginGetOrganizationListByInnKppDelegate == null)) {
                this.onBeginGetOrganizationListByInnKppDelegate = new BeginOperationDelegate(this.OnBeginGetOrganizationListByInnKpp);
            }
            if ((this.onEndGetOrganizationListByInnKppDelegate == null)) {
                this.onEndGetOrganizationListByInnKppDelegate = new EndOperationDelegate(this.OnEndGetOrganizationListByInnKpp);
            }
            if ((this.onGetOrganizationListByInnKppCompletedDelegate == null)) {
                this.onGetOrganizationListByInnKppCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOrganizationListByInnKppCompleted);
            }
            base.InvokeAsync(this.onBeginGetOrganizationListByInnKppDelegate, new object[] {
                        authToken,
                        inn,
                        kpp}, this.onEndGetOrganizationListByInnKppDelegate, this.onGetOrganizationListByInnKppCompletedDelegate, userState);
        }
        
        public string[] CheckCertificates(string[] thumbprints) {
            return base.Channel.CheckCertificates(thumbprints);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckCertificates(string[] thumbprints, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckCertificates(thumbprints, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndCheckCertificates(System.IAsyncResult result) {
            return base.Channel.EndCheckCertificates(result);
        }
        
        private System.IAsyncResult OnBeginCheckCertificates(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[] thumbprints = ((string[])(inValues[0]));
            return this.BeginCheckCertificates(thumbprints, callback, asyncState);
        }
        
        private object[] OnEndCheckCertificates(System.IAsyncResult result) {
            string[] retVal = this.EndCheckCertificates(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckCertificatesCompleted(object state) {
            if ((this.CheckCertificatesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckCertificatesCompleted(this, new CheckCertificatesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckCertificatesAsync(string[] thumbprints) {
            this.CheckCertificatesAsync(thumbprints, null);
        }
        
        public void CheckCertificatesAsync(string[] thumbprints, object userState) {
            if ((this.onBeginCheckCertificatesDelegate == null)) {
                this.onBeginCheckCertificatesDelegate = new BeginOperationDelegate(this.OnBeginCheckCertificates);
            }
            if ((this.onEndCheckCertificatesDelegate == null)) {
                this.onEndCheckCertificatesDelegate = new EndOperationDelegate(this.OnEndCheckCertificates);
            }
            if ((this.onCheckCertificatesCompletedDelegate == null)) {
                this.onCheckCertificatesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckCertificatesCompleted);
            }
            base.InvokeAsync(this.onBeginCheckCertificatesDelegate, new object[] {
                        thumbprints}, this.onEndCheckCertificatesDelegate, this.onCheckCertificatesCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.User GetUserInfo(string authToken, string boxId) {
            return base.Channel.GetUserInfo(authToken, boxId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserInfo(string authToken, string boxId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserInfo(authToken, boxId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.User EndGetUserInfo(System.IAsyncResult result) {
            return base.Channel.EndGetUserInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetUserInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            return this.BeginGetUserInfo(authToken, boxId, callback, asyncState);
        }
        
        private object[] OnEndGetUserInfo(System.IAsyncResult result) {
            Midway.ObjectModel.User retVal = this.EndGetUserInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserInfoCompleted(object state) {
            if ((this.GetUserInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserInfoCompleted(this, new GetUserInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserInfoAsync(string authToken, string boxId) {
            this.GetUserInfoAsync(authToken, boxId, null);
        }
        
        public void GetUserInfoAsync(string authToken, string boxId, object userState) {
            if ((this.onBeginGetUserInfoDelegate == null)) {
                this.onBeginGetUserInfoDelegate = new BeginOperationDelegate(this.OnBeginGetUserInfo);
            }
            if ((this.onEndGetUserInfoDelegate == null)) {
                this.onEndGetUserInfoDelegate = new EndOperationDelegate(this.OnEndGetUserInfo);
            }
            if ((this.onGetUserInfoCompletedDelegate == null)) {
                this.onGetUserInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserInfoDelegate, new object[] {
                        authToken,
                        boxId}, this.onEndGetUserInfoDelegate, this.onGetUserInfoCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.RegisterResult Register(Midway.ObjectModel.RegisterModel registerModel, byte[] certificate) {
            return base.Channel.Register(registerModel, certificate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRegister(Midway.ObjectModel.RegisterModel registerModel, byte[] certificate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegister(registerModel, certificate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.RegisterResult EndRegister(System.IAsyncResult result) {
            return base.Channel.EndRegister(result);
        }
        
        private System.IAsyncResult OnBeginRegister(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Midway.ObjectModel.RegisterModel registerModel = ((Midway.ObjectModel.RegisterModel)(inValues[0]));
            byte[] certificate = ((byte[])(inValues[1]));
            return this.BeginRegister(registerModel, certificate, callback, asyncState);
        }
        
        private object[] OnEndRegister(System.IAsyncResult result) {
            Midway.ObjectModel.RegisterResult retVal = this.EndRegister(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisterCompleted(object state) {
            if ((this.RegisterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterCompleted(this, new RegisterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterAsync(Midway.ObjectModel.RegisterModel registerModel, byte[] certificate) {
            this.RegisterAsync(registerModel, certificate, null);
        }
        
        public void RegisterAsync(Midway.ObjectModel.RegisterModel registerModel, byte[] certificate, object userState) {
            if ((this.onBeginRegisterDelegate == null)) {
                this.onBeginRegisterDelegate = new BeginOperationDelegate(this.OnBeginRegister);
            }
            if ((this.onEndRegisterDelegate == null)) {
                this.onEndRegisterDelegate = new EndOperationDelegate(this.OnEndRegister);
            }
            if ((this.onRegisterCompletedDelegate == null)) {
                this.onRegisterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterDelegate, new object[] {
                        registerModel,
                        certificate}, this.onEndRegisterDelegate, this.onRegisterCompletedDelegate, userState);
        }
        
        public bool AcceptRegulation(string authToken, string boxId, bool acceptRegulation1) {
            return base.Channel.AcceptRegulation(authToken, boxId, acceptRegulation1);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAcceptRegulation(string authToken, string boxId, bool acceptRegulation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAcceptRegulation(authToken, boxId, acceptRegulation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAcceptRegulation(System.IAsyncResult result) {
            return base.Channel.EndAcceptRegulation(result);
        }
        
        private System.IAsyncResult OnBeginAcceptRegulation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            bool acceptRegulation = ((bool)(inValues[2]));
            return this.BeginAcceptRegulation(authToken, boxId, acceptRegulation, callback, asyncState);
        }
        
        private object[] OnEndAcceptRegulation(System.IAsyncResult result) {
            bool retVal = this.EndAcceptRegulation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAcceptRegulationCompleted(object state) {
            if ((this.AcceptRegulationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AcceptRegulationCompleted(this, new AcceptRegulationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AcceptRegulationAsync(string authToken, string boxId, bool acceptRegulation) {
            this.AcceptRegulationAsync(authToken, boxId, acceptRegulation, null);
        }
        
        public void AcceptRegulationAsync(string authToken, string boxId, bool acceptRegulation, object userState) {
            if ((this.onBeginAcceptRegulationDelegate == null)) {
                this.onBeginAcceptRegulationDelegate = new BeginOperationDelegate(this.OnBeginAcceptRegulation);
            }
            if ((this.onEndAcceptRegulationDelegate == null)) {
                this.onEndAcceptRegulationDelegate = new EndOperationDelegate(this.OnEndAcceptRegulation);
            }
            if ((this.onAcceptRegulationCompletedDelegate == null)) {
                this.onAcceptRegulationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAcceptRegulationCompleted);
            }
            base.InvokeAsync(this.onBeginAcceptRegulationDelegate, new object[] {
                        authToken,
                        boxId,
                        acceptRegulation}, this.onEndAcceptRegulationDelegate, this.onAcceptRegulationCompletedDelegate, userState);
        }
        
        public bool HasQualifiedCertificate(string authToken, string contragentBoxId) {
            return base.Channel.HasQualifiedCertificate(authToken, contragentBoxId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginHasQualifiedCertificate(string authToken, string contragentBoxId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginHasQualifiedCertificate(authToken, contragentBoxId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndHasQualifiedCertificate(System.IAsyncResult result) {
            return base.Channel.EndHasQualifiedCertificate(result);
        }
        
        private System.IAsyncResult OnBeginHasQualifiedCertificate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string contragentBoxId = ((string)(inValues[1]));
            return this.BeginHasQualifiedCertificate(authToken, contragentBoxId, callback, asyncState);
        }
        
        private object[] OnEndHasQualifiedCertificate(System.IAsyncResult result) {
            bool retVal = this.EndHasQualifiedCertificate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnHasQualifiedCertificateCompleted(object state) {
            if ((this.HasQualifiedCertificateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.HasQualifiedCertificateCompleted(this, new HasQualifiedCertificateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void HasQualifiedCertificateAsync(string authToken, string contragentBoxId) {
            this.HasQualifiedCertificateAsync(authToken, contragentBoxId, null);
        }
        
        public void HasQualifiedCertificateAsync(string authToken, string contragentBoxId, object userState) {
            if ((this.onBeginHasQualifiedCertificateDelegate == null)) {
                this.onBeginHasQualifiedCertificateDelegate = new BeginOperationDelegate(this.OnBeginHasQualifiedCertificate);
            }
            if ((this.onEndHasQualifiedCertificateDelegate == null)) {
                this.onEndHasQualifiedCertificateDelegate = new EndOperationDelegate(this.OnEndHasQualifiedCertificate);
            }
            if ((this.onHasQualifiedCertificateCompletedDelegate == null)) {
                this.onHasQualifiedCertificateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnHasQualifiedCertificateCompleted);
            }
            base.InvokeAsync(this.onBeginHasQualifiedCertificateDelegate, new object[] {
                        authToken,
                        contragentBoxId}, this.onEndHasQualifiedCertificateDelegate, this.onHasQualifiedCertificateCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.SentMessage SendUnsignedMessage(string authToken, Midway.ObjectModel.UnsignedMessage message) {
            return base.Channel.SendUnsignedMessage(authToken, message);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendUnsignedMessage(string authToken, Midway.ObjectModel.UnsignedMessage message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendUnsignedMessage(authToken, message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.SentMessage EndSendUnsignedMessage(System.IAsyncResult result) {
            return base.Channel.EndSendUnsignedMessage(result);
        }
        
        private System.IAsyncResult OnBeginSendUnsignedMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            Midway.ObjectModel.UnsignedMessage message = ((Midway.ObjectModel.UnsignedMessage)(inValues[1]));
            return this.BeginSendUnsignedMessage(authToken, message, callback, asyncState);
        }
        
        private object[] OnEndSendUnsignedMessage(System.IAsyncResult result) {
            Midway.ObjectModel.SentMessage retVal = this.EndSendUnsignedMessage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendUnsignedMessageCompleted(object state) {
            if ((this.SendUnsignedMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendUnsignedMessageCompleted(this, new SendUnsignedMessageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendUnsignedMessageAsync(string authToken, Midway.ObjectModel.UnsignedMessage message) {
            this.SendUnsignedMessageAsync(authToken, message, null);
        }
        
        public void SendUnsignedMessageAsync(string authToken, Midway.ObjectModel.UnsignedMessage message, object userState) {
            if ((this.onBeginSendUnsignedMessageDelegate == null)) {
                this.onBeginSendUnsignedMessageDelegate = new BeginOperationDelegate(this.OnBeginSendUnsignedMessage);
            }
            if ((this.onEndSendUnsignedMessageDelegate == null)) {
                this.onEndSendUnsignedMessageDelegate = new EndOperationDelegate(this.OnEndSendUnsignedMessage);
            }
            if ((this.onSendUnsignedMessageCompletedDelegate == null)) {
                this.onSendUnsignedMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendUnsignedMessageCompleted);
            }
            base.InvokeAsync(this.onBeginSendUnsignedMessageDelegate, new object[] {
                        authToken,
                        message}, this.onEndSendUnsignedMessageDelegate, this.onSendUnsignedMessageCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.SentMessage SendForwardMessage(string authToken, Midway.ObjectModel.ForwardMessage message) {
            return base.Channel.SendForwardMessage(authToken, message);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendForwardMessage(string authToken, Midway.ObjectModel.ForwardMessage message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendForwardMessage(authToken, message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.SentMessage EndSendForwardMessage(System.IAsyncResult result) {
            return base.Channel.EndSendForwardMessage(result);
        }
        
        private System.IAsyncResult OnBeginSendForwardMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            Midway.ObjectModel.ForwardMessage message = ((Midway.ObjectModel.ForwardMessage)(inValues[1]));
            return this.BeginSendForwardMessage(authToken, message, callback, asyncState);
        }
        
        private object[] OnEndSendForwardMessage(System.IAsyncResult result) {
            Midway.ObjectModel.SentMessage retVal = this.EndSendForwardMessage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendForwardMessageCompleted(object state) {
            if ((this.SendForwardMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendForwardMessageCompleted(this, new SendForwardMessageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendForwardMessageAsync(string authToken, Midway.ObjectModel.ForwardMessage message) {
            this.SendForwardMessageAsync(authToken, message, null);
        }
        
        public void SendForwardMessageAsync(string authToken, Midway.ObjectModel.ForwardMessage message, object userState) {
            if ((this.onBeginSendForwardMessageDelegate == null)) {
                this.onBeginSendForwardMessageDelegate = new BeginOperationDelegate(this.OnBeginSendForwardMessage);
            }
            if ((this.onEndSendForwardMessageDelegate == null)) {
                this.onEndSendForwardMessageDelegate = new EndOperationDelegate(this.OnEndSendForwardMessage);
            }
            if ((this.onSendForwardMessageCompletedDelegate == null)) {
                this.onSendForwardMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendForwardMessageCompleted);
            }
            base.InvokeAsync(this.onBeginSendForwardMessageDelegate, new object[] {
                        authToken,
                        message}, this.onEndSendForwardMessageDelegate, this.onSendForwardMessageCompletedDelegate, userState);
        }
        
        public void SignDocument(string authToken, Midway.ObjectModel.FlowType flowType, Midway.ObjectModel.Sign sign) {
            base.Channel.SignDocument(authToken, flowType, sign);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSignDocument(string authToken, Midway.ObjectModel.FlowType flowType, Midway.ObjectModel.Sign sign, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSignDocument(authToken, flowType, sign, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSignDocument(System.IAsyncResult result) {
            base.Channel.EndSignDocument(result);
        }
        
        private System.IAsyncResult OnBeginSignDocument(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            Midway.ObjectModel.FlowType flowType = ((Midway.ObjectModel.FlowType)(inValues[1]));
            Midway.ObjectModel.Sign sign = ((Midway.ObjectModel.Sign)(inValues[2]));
            return this.BeginSignDocument(authToken, flowType, sign, callback, asyncState);
        }
        
        private object[] OnEndSignDocument(System.IAsyncResult result) {
            this.EndSignDocument(result);
            return null;
        }
        
        private void OnSignDocumentCompleted(object state) {
            if ((this.SignDocumentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SignDocumentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SignDocumentAsync(string authToken, Midway.ObjectModel.FlowType flowType, Midway.ObjectModel.Sign sign) {
            this.SignDocumentAsync(authToken, flowType, sign, null);
        }
        
        public void SignDocumentAsync(string authToken, Midway.ObjectModel.FlowType flowType, Midway.ObjectModel.Sign sign, object userState) {
            if ((this.onBeginSignDocumentDelegate == null)) {
                this.onBeginSignDocumentDelegate = new BeginOperationDelegate(this.OnBeginSignDocument);
            }
            if ((this.onEndSignDocumentDelegate == null)) {
                this.onEndSignDocumentDelegate = new EndOperationDelegate(this.OnEndSignDocument);
            }
            if ((this.onSignDocumentCompletedDelegate == null)) {
                this.onSignDocumentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSignDocumentCompleted);
            }
            base.InvokeAsync(this.onBeginSignDocumentDelegate, new object[] {
                        authToken,
                        flowType,
                        sign}, this.onEndSignDocumentDelegate, this.onSignDocumentCompletedDelegate, userState);
        }
        
        public void RejectSign(string authToken, Midway.ObjectModel.FlowType flowType, Midway.ObjectModel.RejectSign rejectSign1) {
            base.Channel.RejectSign(authToken, flowType, rejectSign1);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRejectSign(string authToken, Midway.ObjectModel.FlowType flowType, Midway.ObjectModel.RejectSign rejectSign, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRejectSign(authToken, flowType, rejectSign, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRejectSign(System.IAsyncResult result) {
            base.Channel.EndRejectSign(result);
        }
        
        private System.IAsyncResult OnBeginRejectSign(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            Midway.ObjectModel.FlowType flowType = ((Midway.ObjectModel.FlowType)(inValues[1]));
            Midway.ObjectModel.RejectSign rejectSign = ((Midway.ObjectModel.RejectSign)(inValues[2]));
            return this.BeginRejectSign(authToken, flowType, rejectSign, callback, asyncState);
        }
        
        private object[] OnEndRejectSign(System.IAsyncResult result) {
            this.EndRejectSign(result);
            return null;
        }
        
        private void OnRejectSignCompleted(object state) {
            if ((this.RejectSignCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RejectSignCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RejectSignAsync(string authToken, Midway.ObjectModel.FlowType flowType, Midway.ObjectModel.RejectSign rejectSign) {
            this.RejectSignAsync(authToken, flowType, rejectSign, null);
        }
        
        public void RejectSignAsync(string authToken, Midway.ObjectModel.FlowType flowType, Midway.ObjectModel.RejectSign rejectSign, object userState) {
            if ((this.onBeginRejectSignDelegate == null)) {
                this.onBeginRejectSignDelegate = new BeginOperationDelegate(this.OnBeginRejectSign);
            }
            if ((this.onEndRejectSignDelegate == null)) {
                this.onEndRejectSignDelegate = new EndOperationDelegate(this.OnEndRejectSign);
            }
            if ((this.onRejectSignCompletedDelegate == null)) {
                this.onRejectSignCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRejectSignCompleted);
            }
            base.InvokeAsync(this.onBeginRejectSignDelegate, new object[] {
                        authToken,
                        flowType,
                        rejectSign}, this.onEndRejectSignDelegate, this.onRejectSignCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.DocumentEntryList GetDocumentEntries(string authToken, Midway.ObjectModel.DocumentEntryOptions options) {
            return base.Channel.GetDocumentEntries(authToken, options);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDocumentEntries(string authToken, Midway.ObjectModel.DocumentEntryOptions options, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDocumentEntries(authToken, options, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.DocumentEntryList EndGetDocumentEntries(System.IAsyncResult result) {
            return base.Channel.EndGetDocumentEntries(result);
        }
        
        private System.IAsyncResult OnBeginGetDocumentEntries(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            Midway.ObjectModel.DocumentEntryOptions options = ((Midway.ObjectModel.DocumentEntryOptions)(inValues[1]));
            return this.BeginGetDocumentEntries(authToken, options, callback, asyncState);
        }
        
        private object[] OnEndGetDocumentEntries(System.IAsyncResult result) {
            Midway.ObjectModel.DocumentEntryList retVal = this.EndGetDocumentEntries(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDocumentEntriesCompleted(object state) {
            if ((this.GetDocumentEntriesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDocumentEntriesCompleted(this, new GetDocumentEntriesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDocumentEntriesAsync(string authToken, Midway.ObjectModel.DocumentEntryOptions options) {
            this.GetDocumentEntriesAsync(authToken, options, null);
        }
        
        public void GetDocumentEntriesAsync(string authToken, Midway.ObjectModel.DocumentEntryOptions options, object userState) {
            if ((this.onBeginGetDocumentEntriesDelegate == null)) {
                this.onBeginGetDocumentEntriesDelegate = new BeginOperationDelegate(this.OnBeginGetDocumentEntries);
            }
            if ((this.onEndGetDocumentEntriesDelegate == null)) {
                this.onEndGetDocumentEntriesDelegate = new EndOperationDelegate(this.OnEndGetDocumentEntries);
            }
            if ((this.onGetDocumentEntriesCompletedDelegate == null)) {
                this.onGetDocumentEntriesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDocumentEntriesCompleted);
            }
            base.InvokeAsync(this.onBeginGetDocumentEntriesDelegate, new object[] {
                        authToken,
                        options}, this.onEndGetDocumentEntriesDelegate, this.onGetDocumentEntriesCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.FlowDocumentInfo GetFlowDocumentInfo(string authToken, string boxId, string documentId, Midway.ObjectModel.FlowDocumentInfoRequestParams requestParams) {
            return base.Channel.GetFlowDocumentInfo(authToken, boxId, documentId, requestParams);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFlowDocumentInfo(string authToken, string boxId, string documentId, Midway.ObjectModel.FlowDocumentInfoRequestParams requestParams, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFlowDocumentInfo(authToken, boxId, documentId, requestParams, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.FlowDocumentInfo EndGetFlowDocumentInfo(System.IAsyncResult result) {
            return base.Channel.EndGetFlowDocumentInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetFlowDocumentInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            string documentId = ((string)(inValues[2]));
            Midway.ObjectModel.FlowDocumentInfoRequestParams requestParams = ((Midway.ObjectModel.FlowDocumentInfoRequestParams)(inValues[3]));
            return this.BeginGetFlowDocumentInfo(authToken, boxId, documentId, requestParams, callback, asyncState);
        }
        
        private object[] OnEndGetFlowDocumentInfo(System.IAsyncResult result) {
            Midway.ObjectModel.FlowDocumentInfo retVal = this.EndGetFlowDocumentInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFlowDocumentInfoCompleted(object state) {
            if ((this.GetFlowDocumentInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFlowDocumentInfoCompleted(this, new GetFlowDocumentInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFlowDocumentInfoAsync(string authToken, string boxId, string documentId, Midway.ObjectModel.FlowDocumentInfoRequestParams requestParams) {
            this.GetFlowDocumentInfoAsync(authToken, boxId, documentId, requestParams, null);
        }
        
        public void GetFlowDocumentInfoAsync(string authToken, string boxId, string documentId, Midway.ObjectModel.FlowDocumentInfoRequestParams requestParams, object userState) {
            if ((this.onBeginGetFlowDocumentInfoDelegate == null)) {
                this.onBeginGetFlowDocumentInfoDelegate = new BeginOperationDelegate(this.OnBeginGetFlowDocumentInfo);
            }
            if ((this.onEndGetFlowDocumentInfoDelegate == null)) {
                this.onEndGetFlowDocumentInfoDelegate = new EndOperationDelegate(this.OnEndGetFlowDocumentInfo);
            }
            if ((this.onGetFlowDocumentInfoCompletedDelegate == null)) {
                this.onGetFlowDocumentInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFlowDocumentInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetFlowDocumentInfoDelegate, new object[] {
                        authToken,
                        boxId,
                        documentId,
                        requestParams}, this.onEndGetFlowDocumentInfoDelegate, this.onGetFlowDocumentInfoCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.SentMessage SendInternalMessage(string authToken, Midway.ObjectModel.InternalMessage message) {
            return base.Channel.SendInternalMessage(authToken, message);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendInternalMessage(string authToken, Midway.ObjectModel.InternalMessage message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendInternalMessage(authToken, message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.SentMessage EndSendInternalMessage(System.IAsyncResult result) {
            return base.Channel.EndSendInternalMessage(result);
        }
        
        private System.IAsyncResult OnBeginSendInternalMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            Midway.ObjectModel.InternalMessage message = ((Midway.ObjectModel.InternalMessage)(inValues[1]));
            return this.BeginSendInternalMessage(authToken, message, callback, asyncState);
        }
        
        private object[] OnEndSendInternalMessage(System.IAsyncResult result) {
            Midway.ObjectModel.SentMessage retVal = this.EndSendInternalMessage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendInternalMessageCompleted(object state) {
            if ((this.SendInternalMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendInternalMessageCompleted(this, new SendInternalMessageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendInternalMessageAsync(string authToken, Midway.ObjectModel.InternalMessage message) {
            this.SendInternalMessageAsync(authToken, message, null);
        }
        
        public void SendInternalMessageAsync(string authToken, Midway.ObjectModel.InternalMessage message, object userState) {
            if ((this.onBeginSendInternalMessageDelegate == null)) {
                this.onBeginSendInternalMessageDelegate = new BeginOperationDelegate(this.OnBeginSendInternalMessage);
            }
            if ((this.onEndSendInternalMessageDelegate == null)) {
                this.onEndSendInternalMessageDelegate = new EndOperationDelegate(this.OnEndSendInternalMessage);
            }
            if ((this.onSendInternalMessageCompletedDelegate == null)) {
                this.onSendInternalMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendInternalMessageCompleted);
            }
            base.InvokeAsync(this.onBeginSendInternalMessageDelegate, new object[] {
                        authToken,
                        message}, this.onEndSendInternalMessageDelegate, this.onSendInternalMessageCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.DocumentEntryList GetInternalDocuments(string authToken, Midway.ObjectModel.InternalListOptions options) {
            return base.Channel.GetInternalDocuments(authToken, options);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetInternalDocuments(string authToken, Midway.ObjectModel.InternalListOptions options, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInternalDocuments(authToken, options, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.DocumentEntryList EndGetInternalDocuments(System.IAsyncResult result) {
            return base.Channel.EndGetInternalDocuments(result);
        }
        
        private System.IAsyncResult OnBeginGetInternalDocuments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            Midway.ObjectModel.InternalListOptions options = ((Midway.ObjectModel.InternalListOptions)(inValues[1]));
            return this.BeginGetInternalDocuments(authToken, options, callback, asyncState);
        }
        
        private object[] OnEndGetInternalDocuments(System.IAsyncResult result) {
            Midway.ObjectModel.DocumentEntryList retVal = this.EndGetInternalDocuments(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInternalDocumentsCompleted(object state) {
            if ((this.GetInternalDocumentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInternalDocumentsCompleted(this, new GetInternalDocumentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInternalDocumentsAsync(string authToken, Midway.ObjectModel.InternalListOptions options) {
            this.GetInternalDocumentsAsync(authToken, options, null);
        }
        
        public void GetInternalDocumentsAsync(string authToken, Midway.ObjectModel.InternalListOptions options, object userState) {
            if ((this.onBeginGetInternalDocumentsDelegate == null)) {
                this.onBeginGetInternalDocumentsDelegate = new BeginOperationDelegate(this.OnBeginGetInternalDocuments);
            }
            if ((this.onEndGetInternalDocumentsDelegate == null)) {
                this.onEndGetInternalDocumentsDelegate = new EndOperationDelegate(this.OnEndGetInternalDocuments);
            }
            if ((this.onGetInternalDocumentsCompletedDelegate == null)) {
                this.onGetInternalDocumentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInternalDocumentsCompleted);
            }
            base.InvokeAsync(this.onBeginGetInternalDocumentsDelegate, new object[] {
                        authToken,
                        options}, this.onEndGetInternalDocumentsDelegate, this.onGetInternalDocumentsCompletedDelegate, userState);
        }
        
        public bool MoveDocumentToDepartment(string authToken, string boxId, string documentId, string departmentId) {
            return base.Channel.MoveDocumentToDepartment(authToken, boxId, documentId, departmentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMoveDocumentToDepartment(string authToken, string boxId, string documentId, string departmentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMoveDocumentToDepartment(authToken, boxId, documentId, departmentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndMoveDocumentToDepartment(System.IAsyncResult result) {
            return base.Channel.EndMoveDocumentToDepartment(result);
        }
        
        private System.IAsyncResult OnBeginMoveDocumentToDepartment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            string documentId = ((string)(inValues[2]));
            string departmentId = ((string)(inValues[3]));
            return this.BeginMoveDocumentToDepartment(authToken, boxId, documentId, departmentId, callback, asyncState);
        }
        
        private object[] OnEndMoveDocumentToDepartment(System.IAsyncResult result) {
            bool retVal = this.EndMoveDocumentToDepartment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMoveDocumentToDepartmentCompleted(object state) {
            if ((this.MoveDocumentToDepartmentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MoveDocumentToDepartmentCompleted(this, new MoveDocumentToDepartmentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MoveDocumentToDepartmentAsync(string authToken, string boxId, string documentId, string departmentId) {
            this.MoveDocumentToDepartmentAsync(authToken, boxId, documentId, departmentId, null);
        }
        
        public void MoveDocumentToDepartmentAsync(string authToken, string boxId, string documentId, string departmentId, object userState) {
            if ((this.onBeginMoveDocumentToDepartmentDelegate == null)) {
                this.onBeginMoveDocumentToDepartmentDelegate = new BeginOperationDelegate(this.OnBeginMoveDocumentToDepartment);
            }
            if ((this.onEndMoveDocumentToDepartmentDelegate == null)) {
                this.onEndMoveDocumentToDepartmentDelegate = new EndOperationDelegate(this.OnEndMoveDocumentToDepartment);
            }
            if ((this.onMoveDocumentToDepartmentCompletedDelegate == null)) {
                this.onMoveDocumentToDepartmentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMoveDocumentToDepartmentCompleted);
            }
            base.InvokeAsync(this.onBeginMoveDocumentToDepartmentDelegate, new object[] {
                        authToken,
                        boxId,
                        documentId,
                        departmentId}, this.onEndMoveDocumentToDepartmentDelegate, this.onMoveDocumentToDepartmentCompletedDelegate, userState);
        }
        
        public string[] MoveDocumentsToDepartment(string authToken, string boxId, string[] documentIds, string departmentId) {
            return base.Channel.MoveDocumentsToDepartment(authToken, boxId, documentIds, departmentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMoveDocumentsToDepartment(string authToken, string boxId, string[] documentIds, string departmentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMoveDocumentsToDepartment(authToken, boxId, documentIds, departmentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndMoveDocumentsToDepartment(System.IAsyncResult result) {
            return base.Channel.EndMoveDocumentsToDepartment(result);
        }
        
        private System.IAsyncResult OnBeginMoveDocumentsToDepartment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            string[] documentIds = ((string[])(inValues[2]));
            string departmentId = ((string)(inValues[3]));
            return this.BeginMoveDocumentsToDepartment(authToken, boxId, documentIds, departmentId, callback, asyncState);
        }
        
        private object[] OnEndMoveDocumentsToDepartment(System.IAsyncResult result) {
            string[] retVal = this.EndMoveDocumentsToDepartment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMoveDocumentsToDepartmentCompleted(object state) {
            if ((this.MoveDocumentsToDepartmentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MoveDocumentsToDepartmentCompleted(this, new MoveDocumentsToDepartmentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MoveDocumentsToDepartmentAsync(string authToken, string boxId, string[] documentIds, string departmentId) {
            this.MoveDocumentsToDepartmentAsync(authToken, boxId, documentIds, departmentId, null);
        }
        
        public void MoveDocumentsToDepartmentAsync(string authToken, string boxId, string[] documentIds, string departmentId, object userState) {
            if ((this.onBeginMoveDocumentsToDepartmentDelegate == null)) {
                this.onBeginMoveDocumentsToDepartmentDelegate = new BeginOperationDelegate(this.OnBeginMoveDocumentsToDepartment);
            }
            if ((this.onEndMoveDocumentsToDepartmentDelegate == null)) {
                this.onEndMoveDocumentsToDepartmentDelegate = new EndOperationDelegate(this.OnEndMoveDocumentsToDepartment);
            }
            if ((this.onMoveDocumentsToDepartmentCompletedDelegate == null)) {
                this.onMoveDocumentsToDepartmentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMoveDocumentsToDepartmentCompleted);
            }
            base.InvokeAsync(this.onBeginMoveDocumentsToDepartmentDelegate, new object[] {
                        authToken,
                        boxId,
                        documentIds,
                        departmentId}, this.onEndMoveDocumentsToDepartmentDelegate, this.onMoveDocumentsToDepartmentCompletedDelegate, userState);
        }
        
        public Midway.ObjectModel.User[] GetDepartmentEmployees(string authToken, string boxId, string departmentId) {
            return base.Channel.GetDepartmentEmployees(authToken, boxId, departmentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDepartmentEmployees(string authToken, string boxId, string departmentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDepartmentEmployees(authToken, boxId, departmentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Midway.ObjectModel.User[] EndGetDepartmentEmployees(System.IAsyncResult result) {
            return base.Channel.EndGetDepartmentEmployees(result);
        }
        
        private System.IAsyncResult OnBeginGetDepartmentEmployees(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string boxId = ((string)(inValues[1]));
            string departmentId = ((string)(inValues[2]));
            return this.BeginGetDepartmentEmployees(authToken, boxId, departmentId, callback, asyncState);
        }
        
        private object[] OnEndGetDepartmentEmployees(System.IAsyncResult result) {
            Midway.ObjectModel.User[] retVal = this.EndGetDepartmentEmployees(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDepartmentEmployeesCompleted(object state) {
            if ((this.GetDepartmentEmployeesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDepartmentEmployeesCompleted(this, new GetDepartmentEmployeesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDepartmentEmployeesAsync(string authToken, string boxId, string departmentId) {
            this.GetDepartmentEmployeesAsync(authToken, boxId, departmentId, null);
        }
        
        public void GetDepartmentEmployeesAsync(string authToken, string boxId, string departmentId, object userState) {
            if ((this.onBeginGetDepartmentEmployeesDelegate == null)) {
                this.onBeginGetDepartmentEmployeesDelegate = new BeginOperationDelegate(this.OnBeginGetDepartmentEmployees);
            }
            if ((this.onEndGetDepartmentEmployeesDelegate == null)) {
                this.onEndGetDepartmentEmployeesDelegate = new EndOperationDelegate(this.OnEndGetDepartmentEmployees);
            }
            if ((this.onGetDepartmentEmployeesCompletedDelegate == null)) {
                this.onGetDepartmentEmployeesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDepartmentEmployeesCompleted);
            }
            base.InvokeAsync(this.onBeginGetDepartmentEmployeesDelegate, new object[] {
                        authToken,
                        boxId,
                        departmentId}, this.onEndGetDepartmentEmployeesDelegate, this.onGetDepartmentEmployeesCompletedDelegate, userState);
        }
    }
}
